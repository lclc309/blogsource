{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/img/hexo20170211162714.png","path":"img/hexo20170211162714.png","modified":0,"renderable":0},{"_id":"source/img/hexo20150701016.png","path":"img/hexo20150701016.png","modified":0,"renderable":0},{"_id":"source/img/jenkinspullssh/publish-ssh-3.png","path":"img/jenkinspullssh/publish-ssh-3.png","modified":0,"renderable":0},{"_id":"source/img/jenkinspullssh/publish-ssh.png","path":"img/jenkinspullssh/publish-ssh.png","modified":0,"renderable":0},{"_id":"source/img/jenkinspullssh/publish-ssh-2.png","path":"img/jenkinspullssh/publish-ssh-2.png","modified":0,"renderable":0},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.gitignore","hash":"de5b9b9e5b313b4a86e805b02f334d35c87bfe56","modified":1486948055426},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1486948055426},{"_id":"themes/next/.javascript_ignore","hash":"74b54cf920cbbf4038a68e54b7138af8b8f45588","modified":1486948055427},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1486948055427},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1486948055426},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1486948055427},{"_id":"themes/next/_config.yml","hash":"742c28b4a39f5be32c7610f101f4a2e4a2c754dc","modified":1490243635136},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1486948055428},{"_id":"themes/next/README.en.md","hash":"953873fe2ee79bfc567b16dcdf8f91c1410444f8","modified":1486948055428},{"_id":"themes/next/package.json","hash":"48e2352f8e41f2b6bbf55254d10f3192ee206d5a","modified":1486948055477},{"_id":"themes/next/gulpfile.coffee","hash":"e549561461642051d195550ec49d793e44ee22a0","modified":1486948055429},{"_id":"themes/next/bower.json","hash":"bd70cf5988bbfc8cbcf13adae659151a55466524","modified":1486948055429},{"_id":"source/categories/index.md","hash":"71c6456a5556b223de7869a40fe1da2e5957af86","modified":1486716177175},{"_id":"source/tags/index.md","hash":"ed71e20ccef4ae828136eaa2a5b5c968ccd9609e","modified":1486716086988},{"_id":"source/img/hexo20170211162714.png","hash":"f3e0c9f17f2a094b33f9169e5918736442235986","modified":1486948055426},{"_id":"source/_posts/jenkins-pull-ssh.md","hash":"127ff77a868ef1dae6f57f3b925b569c66a514b1","modified":1488873090860},{"_id":"source/img/hexo20150701016.png","hash":"3a9df0578bd3c623ab5a2e5e53f5aca3125df377","modified":1486948055425},{"_id":"themes/next/languages/de.yml","hash":"db6a9d669f4b6282cda6c0a2d4e03d3e308a4846","modified":1486948055429},{"_id":"themes/next/languages/default.yml","hash":"0a3672575cc99a77e413a45cd635ca2e096a176e","modified":1486948055429},{"_id":"themes/next/languages/ja.yml","hash":"bc89436a2a015ef72f43f265e56e37d94e73c0cd","modified":1486948055431},{"_id":"themes/next/languages/en.yml","hash":"0a3672575cc99a77e413a45cd635ca2e096a176e","modified":1486948055430},{"_id":"source/_posts/boot-resources.md","hash":"2bcf128b87851759d5a973f5a94740a44c4d6d70","modified":1489134173828},{"_id":"source/_posts/hexo-githun-new.md","hash":"1cea456fa6919d597435224a7c566ad30986c840","modified":1488872613030},{"_id":"themes/next/languages/id.yml","hash":"d8b9dc017da0be7f71fda1cacd8064cbc38963b9","modified":1486948055430},{"_id":"themes/next/languages/fr-FR.yml","hash":"91cf55b9d75879e72c8008d2659fe2ea993a4cca","modified":1486948055430},{"_id":"themes/next/languages/ru.yml","hash":"40f4260866eab5c28ba715c3be495d7e81c73df7","modified":1486948055432},{"_id":"themes/next/scripts/merge-configs.js","hash":"f8cde6953939802f92da5b7a2458c6c539e9be69","modified":1486948055477},{"_id":"themes/next/languages/ko.yml","hash":"c59676f2af80c3c594c34c4a0fcbf65fd8864ff3","modified":1486948055431},{"_id":"themes/next/languages/pt.yml","hash":"f364905121a816c9797acce07c0a4f248965b29a","modified":1486948055431},{"_id":"themes/next/languages/zh-Hans.yml","hash":"439c16c744b1596f24d9e0b4e230c4d3c93b7d85","modified":1486948055432},{"_id":"themes/next/languages/zh-hk.yml","hash":"a59f3f3114f5eb4d170a76da4359307e8f5159a7","modified":1486948055442},{"_id":"themes/next/languages/pt-BR.yml","hash":"4b91f96b07e05705b28964df7460466c9b522e2c","modified":1486948055431},{"_id":"themes/next/languages/zh-tw.yml","hash":"18da1324d2212faca9a6e5e6ce98b419c86d4b0c","modified":1486948055443},{"_id":"themes/next/layout/index.swig","hash":"e5b52e04296203262a400e8e36ae12426d31fd5b","modified":1486948055475},{"_id":"themes/next/layout/_layout.swig","hash":"24de463d28bacbf2a28c34fecf082980f7f33a12","modified":1486948055445},{"_id":"themes/next/layout/schedule.swig","hash":"595013860078799d455af4965b3a7c5c4fd3923c","modified":1486948055476},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1486948055475},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1486948055476},{"_id":"themes/next/layout/page.swig","hash":"2a13804aa186f6062738d136e430870c53789bf4","modified":1486948055475},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1486948055564},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1486948055476},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1486948055475},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1486948055509},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1486948055564},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1486948055564},{"_id":"themes/next/scripts/tags/button.js","hash":"aaf71be6b483fca7a65cd6296c2cf1c2271c26a6","modified":1486948055478},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1486948055478},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1486948055478},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1486948055479},{"_id":"themes/next/scripts/tags/note.js","hash":"7dc14db08f2c74f8f1952534b424f220f5c000c6","modified":1486948055479},{"_id":"source/img/jenkinspullssh/publish-ssh-3.png","hash":"fe8d3d09314e633be0c8d244d6c8a71715c9a396","modified":1488871919248},{"_id":"source/img/jenkinspullssh/publish-ssh.png","hash":"561d0a64de1312cb11f4a1e5b5c397db4022be39","modified":1488871210998},{"_id":"source/img/jenkinspullssh/publish-ssh-2.png","hash":"eb18ed2f1a75f9394fb6ee91c9e8a1aa2d3c38cf","modified":1488871785952},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1486948055514},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1486948055509},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1486948055514},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1486948055514},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1486948055515},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1486948055515},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1486948055515},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1486948055517},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1486948055517},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1486948055516},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1486948055516},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1486948055517},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1486948055517},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1486948055444},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1486948055445},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1486948055448},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1486948055517},{"_id":"themes/next/layout/_partials/footer.swig","hash":"5e965cad740729a9d5d86be5a4c826d047edba1c","modified":1489991309019},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"dfbb6e9692333166aa78231ad12b2a40c153cbcb","modified":1486948055450},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1486948055450},{"_id":"themes/next/layout/_partials/head.swig","hash":"376adb0c482242ef8bcad31b93b99cc5c35e92fa","modified":1486948055448},{"_id":"themes/next/layout/_partials/search.swig","hash":"952b7b8d9ce2c81d4002a9dc2331f1e710f99616","modified":1486948055450},{"_id":"themes/next/layout/_partials/header.swig","hash":"8985089c950d6df0efab9cd549a6b9ee50708ee2","modified":1486948055449},{"_id":"themes/next/layout/_partials/comments.swig","hash":"cd74d7d0aa2097de0e73e8e53cca5d022cec8c43","modified":1486948055448},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1486948055446},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1486948055447},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"6d40652784585d263c37b8a3723e43e04b926ca7","modified":1486948055446},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1486948055453},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1486948055454},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1486948055453},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"a42851e17d8961e5cae8b588d95a4a5456964972","modified":1486948055447},{"_id":"themes/next/layout/_macro/post.swig","hash":"4cb9c43f883ad331527bb2446994eb24b2fddeeb","modified":1486948055446},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"e9beddda9758d8739c41fc8c67b2e72fc29c1244","modified":1486948055475},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1486948055516},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1486948055499},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1486948055500},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1486948055500},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1486948055508},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1486948055509},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1486948055466},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1486948055466},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1486948055499},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1486948055500},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1486948055500},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1486948055508},{"_id":"themes/next/source/css/_variables/base.styl","hash":"8b08a5ce4222aa731b180a12127bd0e52d12ede8","modified":1486948055508},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1486948055518},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c666e352c3b8e4ad0a16cc757b08f44ef9172182","modified":1486948055508},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1486948055519},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"84bdc8a4fe127849a5c99bdefe1d0b65ee1a4a0a","modified":1486948055518},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"4a0da1bed19e65bd7db42421b447061bc1618710","modified":1486948055519},{"_id":"themes/next/source/js/src/post-details.js","hash":"458af3b1bd7783c1950808e66cedfa9fb68bf21f","modified":1486948055520},{"_id":"themes/next/source/js/src/utils.js","hash":"e34f83848883732ddd7a34a3e3ed2a293f0f76a7","modified":1486948055521},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1486948055521},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1486948055526},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1486948055537},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1486948055538},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1486948055538},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1486948055538},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1486948055520},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"8868275e8b6340c87a81c69a54ed138d11fb3c3e","modified":1486948055537},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1486948055535},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1486948055536},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1486948055522},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1486948055536},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1486948055535},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1486948055559},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1486948055558},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1486948055559},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1486948055555},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1486948055558},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1486948055559},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1486948055558},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1486948055560},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1486948055560},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1486948055562},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"bb2c3a926bb7f8fea54d424882b25d93dfde7ae6","modified":1486948055444},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1486948055449},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1486948055563},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"efa7efcbb575381b508f9aa0e0c53140eef72a7b","modified":1486948055451},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1486948055451},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1486948055451},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1486948055452},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1486948055449},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1486948055563},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1486948055452},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1486948055454},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1486948055466},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1486948055452},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"8b34af99cb673853fd948c02d07eb11eb3fb41b4","modified":1486948055467},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1486948055452},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"03d259066399c1eb4a436ea4e5e7a4802426d72c","modified":1486948055471},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1486948055474},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1486948055444},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1486948055475},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1486948055556},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ad69cbf94eedacc27e756cdb9c7073416db697d0","modified":1486948055480},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"b7d5cc29586ac796a50d90974ad99d24a5982137","modified":1486948055480},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1486948055480},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"f592adff22628b271ec9657b080cf6b9cc200615","modified":1486948055473},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1486948055474},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1486948055473},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1486948055480},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1486948055492},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1486948055485},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1486948055498},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1486948055496},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5a35aa0381b0e1d465b952a997194441020446ea","modified":1486948055498},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1486948055501},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"b6ee5fefa6046086a76ddbcfafc82482816fa3e0","modified":1486948055498},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1486948055501},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1486948055502},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1486948055502},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1486948055499},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"ce272226a1570f5f7c70243b751a5b0fe1671a88","modified":1486948055502},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1486948055504},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1486948055504},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1486948055505},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1486948055504},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1486948055505},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"34acb45007229b299951ce35d8eef642ea16fbe9","modified":1486948055506},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1486948055498},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1486948055503},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1486948055507},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1486948055507},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1486948055501},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"c2390263a298a2b78c5f941e6827c13f02e1ee85","modified":1486948055520},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1486948055529},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"173f3aa31c41782591b7abeadd4f88f68d59b042","modified":1486948055506},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"1be4ef3f97f329e2531bfd2dfdc40c0e46df35c8","modified":1486948055507},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"221d3dbc04ff6c211ba9382397c4977e9f493153","modified":1486948055506},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1486948055530},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1486948055530},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1486948055530},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1486948055533},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1486948055529},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1486948055531},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"a02674d823c7b577d38c3cdb91953993b6e4b3a0","modified":1486948055539},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"3c1d63dd1176c77f9f4cdb1616fbb08c31b9822f","modified":1486948055540},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1486948055534},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1486948055539},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1486948055535},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1486948055536},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1486948055559},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1486948055537},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1486948055468},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"24105e62d7f26946907fa14cd02589f899bf8122","modified":1486948055468},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1486948055468},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1486948055468},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1486948055470},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"1b6af02fd0ba3f729675cd95429a0cea4aebf358","modified":1486948055470},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-mta.swig","hash":"e9a0590dafde1046356620dd2b81e83b6b3b0936","modified":1486948055470},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1486948055467},{"_id":"themes/next/layout/_scripts/third-party/analytics/vkontakte-api.swig","hash":"0506bcaf3dff28088bac6fdb8c8dbb4dc8915dfa","modified":1486948055470},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"e4a13e8cd19762ef3aea0e59dfae8b3c1f251f11","modified":1486948055471},{"_id":"themes/next/layout/_scripts/third-party/comments/livere.swig","hash":"5830a52c2a555d3a1f19b67d7bf3d072376cdea9","modified":1486948055472},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1486948055472},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1486948055471},{"_id":"themes/next/layout/_scripts/third-party/comments/gentie.swig","hash":"0f38f053841ef77cdce56a84cfbb4dd4c3329486","modified":1486948055472},{"_id":"themes/next/layout/_scripts/third-party/comments/youyan.swig","hash":"de95ec8920d1660680078451008f8bd69f14d082","modified":1486948055472},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1486948055545},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1486948055555},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1486948055545},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1486948055562},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1486948055560},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1486948055482},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1486948055481},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1486948055481},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"852fd77500bda2c1a6651a14aa48d7d6222adc9d","modified":1486948055482},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1486948055483},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1486948055482},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1486948055484},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1486948055484},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1486948055484},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1486948055485},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"4783f85872bc7e218c1522a5c1c68cd27a5922db","modified":1486948055486},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1486948055482},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"cd2def16d31feb234be27dcdce2a919f70cc6919","modified":1486948055483},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1486948055486},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1486948055487},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1486948055486},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"4866fb9453d7d4c83a1c4e55d74e4afed336eb8b","modified":1486948055486},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1486948055484},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1486948055485},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1486948055488},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1486948055488},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"61ec8a8481e8b76f2943235256c6d4f89c751c1c","modified":1486948055487},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1486948055489},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1486948055488},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1486948055489},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"821991c0890966a512b43e8b1cf9537e738a09a0","modified":1486948055490},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1486948055490},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1486948055490},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1486948055487},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1486948055487},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"06b9a99d63b4d57fdbf70b88ab7036fbc47e3f52","modified":1486948055492},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1486948055492},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1486948055494},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"011d5828b4972b2df0b429794b4466ba5bc1b49e","modified":1486948055489},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"7f7e9df15148608a9c29326dd880d8e8e8efc0ec","modified":1486948055494},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1486948055492},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"cd526e814f9323a79fe835085d64867d34b3715d","modified":1486948055496},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1486948055492},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1486948055496},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"dc944a01dd59f5ed2d44bb22fdb21fc3f455948f","modified":1486948055496},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1486948055492},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"eb4ede7d7446d8a2f2ddeef3b17f497a6ad30756","modified":1486948055496},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1486948055492},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1486948055492},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"c8a05ce90784db9744c22fab22019eb637df1f2f","modified":1486948055493},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1486948055503},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1486948055503},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1486948055505},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"8420b4be386469337243336aee694297875bd439","modified":1486948055493},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"3b1aabbab57b0b1fafa311feb1212f59e78e7928","modified":1486948055494},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1486948055531},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1486948055531},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1486948055532},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1486948055532},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1486948055553},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1486948055554},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1486948055533},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1486948055494},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1486948055526},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1486948055532},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"964e8dac2cee79c4b49b5bc300675773f6518812","modified":1486948055549},{"_id":"public/categories/index.html","hash":"47bf7ca6b3cab527a293c613421ba752c9a42fe1","modified":1490243647090},{"_id":"public/tags/index.html","hash":"4e676fff59beb3fc50469913bb51b3824edaf757","modified":1490243647090},{"_id":"public/archives/index.html","hash":"3237aa822251e3ecbc7989a56b704320f15aa0a1","modified":1490243647090},{"_id":"public/archives/2017/index.html","hash":"b4161f095081f8d3cb11608e26948ce313db3760","modified":1490243647091},{"_id":"public/tags/环境搭建/index.html","hash":"e85c1a7a53e710342b13a4e04a74ecfc0a5919b9","modified":1490243647091},{"_id":"public/tags/spring-boot/index.html","hash":"675cb321095f294d9bf651ed5a9c86ccd8a7b6f2","modified":1490243647091},{"_id":"public/archives/2017/02/index.html","hash":"baea15e99624c354ab51790ecdbd0c19230cb9c6","modified":1490243647091},{"_id":"public/categories/spring-boot/index.html","hash":"5d402c56b3945d3a62482afd26129f7a54b661fb","modified":1490243647091},{"_id":"public/categories/环境搭建/index.html","hash":"5a1c14da0058afbc774cabb135c297213beca29f","modified":1490243647091},{"_id":"public/archives/2017/03/index.html","hash":"9378887edd3e4246ab16ede5e7d50ca897cb492e","modified":1490243647091},{"_id":"public/2017/03/10/boot-resources/index.html","hash":"2b11d3e516005791d02a9d659cf9ef055fcd0c55","modified":1490243647091},{"_id":"public/2017/03/07/jenkins-pull-ssh/index.html","hash":"5247ae4ac0e9bb2d0e3ff1b6ff2d11a99de18f4b","modified":1490243647091},{"_id":"public/index.html","hash":"65c94687f5ecfd88720d5bfe5c65b7195106a923","modified":1490243647091},{"_id":"public/2017/02/10/hexo-githun-new/index.html","hash":"2b29c19d9b363e0ad3c64970a3b33cff6b2690a7","modified":1490243647091},{"_id":"public/img/hexo20170211162714.png","hash":"f3e0c9f17f2a094b33f9169e5918736442235986","modified":1490243539670},{"_id":"public/img/jenkinspullssh/publish-ssh-3.png","hash":"fe8d3d09314e633be0c8d244d6c8a71715c9a396","modified":1490243539670},{"_id":"public/img/hexo20150701016.png","hash":"3a9df0578bd3c623ab5a2e5e53f5aca3125df377","modified":1490243539670},{"_id":"public/img/jenkinspullssh/publish-ssh.png","hash":"561d0a64de1312cb11f4a1e5b5c397db4022be39","modified":1490243539670},{"_id":"public/img/jenkinspullssh/publish-ssh-2.png","hash":"eb18ed2f1a75f9394fb6ee91c9e8a1aa2d3c38cf","modified":1490243539670},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1490243539670},{"_id":"public/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1490243539670},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1490243539671},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1490243539671},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1490243539671},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1490243539671},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1490243539671},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1490243540760},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1490243540761},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1490243540761},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1490243540761},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1490243540761},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1490243540761},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1490243540761},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1490243540761},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1490243540761},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1490243540761},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1490243540761},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1490243540762},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1490243540762},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1490243540762},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1490243540762},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1490243540762},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1490243540762},{"_id":"public/css/main.css","hash":"7dbb49be414a7d8563f1e9692f6ea320c5d277b8","modified":1490243540792},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1490243540792},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1490243540803},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1490243540803},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1490243540803},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1490243540813},{"_id":"public/js/src/algolia-search.js","hash":"96b29f69b8b916b22f62c9959a117b5a968200a5","modified":1490243540813},{"_id":"public/js/src/utils.js","hash":"384e17ff857f073060f5bf8c6e4f4b7353236331","modified":1490243540814},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1490243540814},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1490243540814},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1490243540814},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1490243540814},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1490243540814},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1490243540814},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1490243540814},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1490243540814},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1490243540814},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1490243540814},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1490243540814},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1490243540814},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1490243540814},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1490243540814},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1490243540814},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1490243540814},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1490243540814},{"_id":"public/js/src/schemes/pisces.js","hash":"9ccee9189c910b8a264802d7b2ec305d12dedcd0","modified":1490243540814},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1490243540814},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1490243540814},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1490243540814},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1490243540814},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1490243540814},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1490243540814},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1490243540815},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1490243540815},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1490243540815},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1490243540815},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1490243540815},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1490243540815},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1490243540815},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1490243540815},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1490243540815},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1490243540815},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1490243540815},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1490243540815},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1490243540815},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1490243540815},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"964e8dac2cee79c4b49b5bc300675773f6518812","modified":1490243540825}],"Category":[{"name":"环境搭建","_id":"cj0lwix8l0004zobwzcc8bssr"},{"name":"spring-boot","_id":"cj0lwix8s0007zobws9dl8ibe"}],"Data":[],"Page":[{"title":"分类","date":"2014-12-22T04:39:04.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2014-12-22 12:39:04\ntype: \"categories\"\ncomments: false\n---\n","updated":"2017-02-10T08:42:57.175Z","path":"categories/index.html","layout":"page","_id":"cj0lwix890000zobwdfa0fh6y","content":"","excerpt":"","more":""},{"title":"标签","date":"2014-12-22T04:39:04.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2014-12-22 12:39:04\ntype: \"tags\"\ncomments: false\n---","updated":"2017-02-10T08:41:26.988Z","path":"tags/index.html","layout":"page","_id":"cj0lwix8f0002zobwq68lhsoz","content":"","excerpt":"","more":""}],"Post":[{"title":"jenkins持续集成-自动部署","date":"2017-03-06T16:00:00.000Z","_content":"\n持续集成(Continuous integration)是一种软件开发实践,当项目越来越大,结构越来越复杂,人员越来越庞大.协同,编译,测试,发布都成为一种耗时间的事情.\n持续集成是一种自动化的构建.将复杂繁琐的构建进行自动化.从而尽快地发现集成错误。许多团队发现这个过程可以大大减少集成的问题，让团队能够更快的开发内聚.\n\n最近公司使用jenkins做持续集成.从git上获取代码,通过maven进行打包.\n打包后进行发布到各自的服务器.\n\n本文记录了如何进行部署到服务器的.\n\n<!--more-->\n\n# 前言\njenkins的安装,链接git什么的直接百度就ok了\n\n# 安装插件\njenkins 自动部署需要一个插件 \n`Publish Over SSH`\n\n# 设置服务器信息\n我们需要先设置要部署的服务器信息,即ssh信息\n\n系统管理->系统设置 找到publish over ssh\n![设置ssh](/img/jenkinspullssh/publish-ssh.png)\n\n``` bash\nPassphrase: 如果是密匙的话是密匙的密码,如果使用用户名登录,这里是用户名密码,没有密码留空\n\nPath to key: 私钥的保存位置,我们把key拷贝到了jenkins工作目录下的sshkey/id_rsa.\n\t\t这一项可不写,可以直接把key的内容填到下面一栏中.两者可二选一.\n\nKey : 私钥的内容.如果上面的没写的话,这里一定要写.和上面的选项是二选一的.也可以2个都给.\n\nSSH Servers: 远程服务器相关配置,也就是我们要把程序发布到的那一台机器的相关配置.主要配置有\n\nName: 起一个名字,方便后面配置发布的时候,选择服务器.\n\nHostname: 远程服务器的IP地址,如果写远程的主机名的话,要在jenkins的hosts文件中加映射.\n\nUsername: 远程服务器的登录用户名\n\nRemote Directory: 要把文件发布到远程机器的哪一个目录.\n\n```\n\n设置好点击保存\n\n# 项目设置构建配置\njenkins中进入我们项目的面板,进入配置项.\n找到Post Steps 面板,这个面板是说 在构建成功后执行的操作\n添加一步操作,找到Send files or execute commands over SSH 一项,这一项是我们之前安装的 publish over ssh 插件所拥有的.\n![添加操作](/img/jenkinspullssh/publish-ssh-3.png)\n\n添加后:\n![设置操作](/img/jenkinspullssh/publish-ssh-2.png)\n\n```bash\nsshServer 选择一个要发布的服务器,这里是前面已经添加好的服务器的名字.\n\nsource files: 要拷贝到远程的文件.这里的相对路径是相对于jenkins的WORKSPACE的.\n\t即jenkins的工作目录.\n\nremove prefix: 这里是一个要注意的地方,如果这里的remove prefix为空,\n\t则jenkins会在远程服务器上面创建一个target的目录,然后把文件放进去.\n\t如果不想要target目录,这里就要写target.\n\nremote directory: 把文件放在远程服务器的哪个位置.这个位置相对于之前设置的全局Remote Directory:\n\nexec command: 把文件拷贝到远程服务器之后,要在远程服务器执行的命令,如果没有命令可以不写.\n\t\t我这里是让其执行一个文件,该文件内容为将tomcat重启.\n\n```\n\n# 其他\n到上一步为止,所有的设置就结束了.\njenkins会在项目构建完成后,将打出的war包推到配置的服务器上.\n这里贴出我wfmanager.sh的内容,以便参考.\n\n```shell\n#源地址\nsource_name=\"/storage/tools/data/wfmanager\n/horizon-workflow-web/target/horizon-workflow-web.war\"\n#目标目录\ntarget_dir=\"/storage/tools/horizon1\"\n#目标名称\ntarget_name=\"workflow\"\n\n#1.首先关闭tomcat\nPID=`ps aux | grep $target_dir | grep java | awk '{print $2}'`\nif [ -n \"$PID\" ]; then\n        echo \"Will shutdown tomcat: $PID\"\n        sh \"$target_dir/bin/shutdown.sh\"\n        sleep 5\nfi\n#1.1 停止失败,则直接kill进程\n\nPID2=`ps aux | grep $target_dir | grep java | awk '{print $2}'`\n\nif [ -n \"$PID2\" ]; then\n\t\techo \"shutdown tomcat has failed.Will kill tomcat: $PID\"\n        kill -9 $PID2\n        \nfi\n\n#2. 删除掉原来的项目\n#rm -rf ${target_dir}/webapps/${target_name}\nrm  ${target_dir}/webapps/${target_name}.war\n\n#3. 将文件移动到tomcat目录\nmv ${source_name} ${target_dir}/webapps/${target_name}.war\n\n#4. 启动tomcat\nsh \"$target_dir/bin/startup.sh\"\n\n#5. 验证tomcat启动成功\nsleep 3\n\nPID=`ps aux | grep $target_dir | grep java | awk '{print $2}'`\nif [ -n \"$PID\" ]; then\n        echo \"\\nRestart tomcat successfully!\"\nelse\n        echo \"\\nFail to startup tomcat\"\n        exit 1\nfi\n\n```\n\n\n\n","source":"_posts/jenkins-pull-ssh.md","raw":"---\ntitle: jenkins持续集成-自动部署\ndate: 2017-03-07\ncategories: 环境搭建\ntags: 环境搭建\n---\n\n持续集成(Continuous integration)是一种软件开发实践,当项目越来越大,结构越来越复杂,人员越来越庞大.协同,编译,测试,发布都成为一种耗时间的事情.\n持续集成是一种自动化的构建.将复杂繁琐的构建进行自动化.从而尽快地发现集成错误。许多团队发现这个过程可以大大减少集成的问题，让团队能够更快的开发内聚.\n\n最近公司使用jenkins做持续集成.从git上获取代码,通过maven进行打包.\n打包后进行发布到各自的服务器.\n\n本文记录了如何进行部署到服务器的.\n\n<!--more-->\n\n# 前言\njenkins的安装,链接git什么的直接百度就ok了\n\n# 安装插件\njenkins 自动部署需要一个插件 \n`Publish Over SSH`\n\n# 设置服务器信息\n我们需要先设置要部署的服务器信息,即ssh信息\n\n系统管理->系统设置 找到publish over ssh\n![设置ssh](/img/jenkinspullssh/publish-ssh.png)\n\n``` bash\nPassphrase: 如果是密匙的话是密匙的密码,如果使用用户名登录,这里是用户名密码,没有密码留空\n\nPath to key: 私钥的保存位置,我们把key拷贝到了jenkins工作目录下的sshkey/id_rsa.\n\t\t这一项可不写,可以直接把key的内容填到下面一栏中.两者可二选一.\n\nKey : 私钥的内容.如果上面的没写的话,这里一定要写.和上面的选项是二选一的.也可以2个都给.\n\nSSH Servers: 远程服务器相关配置,也就是我们要把程序发布到的那一台机器的相关配置.主要配置有\n\nName: 起一个名字,方便后面配置发布的时候,选择服务器.\n\nHostname: 远程服务器的IP地址,如果写远程的主机名的话,要在jenkins的hosts文件中加映射.\n\nUsername: 远程服务器的登录用户名\n\nRemote Directory: 要把文件发布到远程机器的哪一个目录.\n\n```\n\n设置好点击保存\n\n# 项目设置构建配置\njenkins中进入我们项目的面板,进入配置项.\n找到Post Steps 面板,这个面板是说 在构建成功后执行的操作\n添加一步操作,找到Send files or execute commands over SSH 一项,这一项是我们之前安装的 publish over ssh 插件所拥有的.\n![添加操作](/img/jenkinspullssh/publish-ssh-3.png)\n\n添加后:\n![设置操作](/img/jenkinspullssh/publish-ssh-2.png)\n\n```bash\nsshServer 选择一个要发布的服务器,这里是前面已经添加好的服务器的名字.\n\nsource files: 要拷贝到远程的文件.这里的相对路径是相对于jenkins的WORKSPACE的.\n\t即jenkins的工作目录.\n\nremove prefix: 这里是一个要注意的地方,如果这里的remove prefix为空,\n\t则jenkins会在远程服务器上面创建一个target的目录,然后把文件放进去.\n\t如果不想要target目录,这里就要写target.\n\nremote directory: 把文件放在远程服务器的哪个位置.这个位置相对于之前设置的全局Remote Directory:\n\nexec command: 把文件拷贝到远程服务器之后,要在远程服务器执行的命令,如果没有命令可以不写.\n\t\t我这里是让其执行一个文件,该文件内容为将tomcat重启.\n\n```\n\n# 其他\n到上一步为止,所有的设置就结束了.\njenkins会在项目构建完成后,将打出的war包推到配置的服务器上.\n这里贴出我wfmanager.sh的内容,以便参考.\n\n```shell\n#源地址\nsource_name=\"/storage/tools/data/wfmanager\n/horizon-workflow-web/target/horizon-workflow-web.war\"\n#目标目录\ntarget_dir=\"/storage/tools/horizon1\"\n#目标名称\ntarget_name=\"workflow\"\n\n#1.首先关闭tomcat\nPID=`ps aux | grep $target_dir | grep java | awk '{print $2}'`\nif [ -n \"$PID\" ]; then\n        echo \"Will shutdown tomcat: $PID\"\n        sh \"$target_dir/bin/shutdown.sh\"\n        sleep 5\nfi\n#1.1 停止失败,则直接kill进程\n\nPID2=`ps aux | grep $target_dir | grep java | awk '{print $2}'`\n\nif [ -n \"$PID2\" ]; then\n\t\techo \"shutdown tomcat has failed.Will kill tomcat: $PID\"\n        kill -9 $PID2\n        \nfi\n\n#2. 删除掉原来的项目\n#rm -rf ${target_dir}/webapps/${target_name}\nrm  ${target_dir}/webapps/${target_name}.war\n\n#3. 将文件移动到tomcat目录\nmv ${source_name} ${target_dir}/webapps/${target_name}.war\n\n#4. 启动tomcat\nsh \"$target_dir/bin/startup.sh\"\n\n#5. 验证tomcat启动成功\nsleep 3\n\nPID=`ps aux | grep $target_dir | grep java | awk '{print $2}'`\nif [ -n \"$PID\" ]; then\n        echo \"\\nRestart tomcat successfully!\"\nelse\n        echo \"\\nFail to startup tomcat\"\n        exit 1\nfi\n\n```\n\n\n\n","slug":"jenkins-pull-ssh","published":1,"updated":"2017-03-07T07:51:30.860Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0lwix8b0001zobwy026zc5w","content":"<p>持续集成(Continuous integration)是一种软件开发实践,当项目越来越大,结构越来越复杂,人员越来越庞大.协同,编译,测试,发布都成为一种耗时间的事情.<br>持续集成是一种自动化的构建.将复杂繁琐的构建进行自动化.从而尽快地发现集成错误。许多团队发现这个过程可以大大减少集成的问题，让团队能够更快的开发内聚.</p>\n<p>最近公司使用jenkins做持续集成.从git上获取代码,通过maven进行打包.<br>打包后进行发布到各自的服务器.</p>\n<p>本文记录了如何进行部署到服务器的.</p>\n<a id=\"more\"></a>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>jenkins的安装,链接git什么的直接百度就ok了</p>\n<h1 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h1><p>jenkins 自动部署需要一个插件<br><code>Publish Over SSH</code></p>\n<h1 id=\"设置服务器信息\"><a href=\"#设置服务器信息\" class=\"headerlink\" title=\"设置服务器信息\"></a>设置服务器信息</h1><p>我们需要先设置要部署的服务器信息,即ssh信息</p>\n<p>系统管理-&gt;系统设置 找到publish over ssh<br><img src=\"/img/jenkinspullssh/publish-ssh.png\" alt=\"设置ssh\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">Passphrase: 如果是密匙的话是密匙的密码,如果使用用户名登录,这里是用户名密码,没有密码留空</div><div class=\"line\"></div><div class=\"line\">Path to key: 私钥的保存位置,我们把key拷贝到了jenkins工作目录下的sshkey/id_rsa.</div><div class=\"line\">\t\t这一项可不写,可以直接把key的内容填到下面一栏中.两者可二选一.</div><div class=\"line\"></div><div class=\"line\">Key : 私钥的内容.如果上面的没写的话,这里一定要写.和上面的选项是二选一的.也可以2个都给.</div><div class=\"line\"></div><div class=\"line\">SSH Servers: 远程服务器相关配置,也就是我们要把程序发布到的那一台机器的相关配置.主要配置有</div><div class=\"line\"></div><div class=\"line\">Name: 起一个名字,方便后面配置发布的时候,选择服务器.</div><div class=\"line\"></div><div class=\"line\">Hostname: 远程服务器的IP地址,如果写远程的主机名的话,要在jenkins的hosts文件中加映射.</div><div class=\"line\"></div><div class=\"line\">Username: 远程服务器的登录用户名</div><div class=\"line\"></div><div class=\"line\">Remote Directory: 要把文件发布到远程机器的哪一个目录.</div></pre></td></tr></table></figure>\n<p>设置好点击保存</p>\n<h1 id=\"项目设置构建配置\"><a href=\"#项目设置构建配置\" class=\"headerlink\" title=\"项目设置构建配置\"></a>项目设置构建配置</h1><p>jenkins中进入我们项目的面板,进入配置项.<br>找到Post Steps 面板,这个面板是说 在构建成功后执行的操作<br>添加一步操作,找到Send files or execute commands over SSH 一项,这一项是我们之前安装的 publish over ssh 插件所拥有的.<br><img src=\"/img/jenkinspullssh/publish-ssh-3.png\" alt=\"添加操作\"></p>\n<p>添加后:<br><img src=\"/img/jenkinspullssh/publish-ssh-2.png\" alt=\"设置操作\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">sshServer 选择一个要发布的服务器,这里是前面已经添加好的服务器的名字.</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">source</span> files: 要拷贝到远程的文件.这里的相对路径是相对于jenkins的WORKSPACE的.</div><div class=\"line\">\t即jenkins的工作目录.</div><div class=\"line\"></div><div class=\"line\">remove prefix: 这里是一个要注意的地方,如果这里的remove prefix为空,</div><div class=\"line\">\t则jenkins会在远程服务器上面创建一个target的目录,然后把文件放进去.</div><div class=\"line\">\t如果不想要target目录,这里就要写target.</div><div class=\"line\"></div><div class=\"line\">remote directory: 把文件放在远程服务器的哪个位置.这个位置相对于之前设置的全局Remote Directory:</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">exec</span> <span class=\"built_in\">command</span>: 把文件拷贝到远程服务器之后,要在远程服务器执行的命令,如果没有命令可以不写.</div><div class=\"line\">\t\t我这里是让其执行一个文件,该文件内容为将tomcat重启.</div></pre></td></tr></table></figure>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><p>到上一步为止,所有的设置就结束了.<br>jenkins会在项目构建完成后,将打出的war包推到配置的服务器上.<br>这里贴出我wfmanager.sh的内容,以便参考.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\">#源地址</div><div class=\"line\">source_name=&quot;/storage/tools/data/wfmanager</div><div class=\"line\">/horizon-workflow-web/target/horizon-workflow-web.war&quot;</div><div class=\"line\">#目标目录</div><div class=\"line\">target_dir=&quot;/storage/tools/horizon1&quot;</div><div class=\"line\">#目标名称</div><div class=\"line\">target_name=&quot;workflow&quot;</div><div class=\"line\"></div><div class=\"line\">#1.首先关闭tomcat</div><div class=\"line\">PID=`ps aux | grep $target_dir | grep java | awk &apos;&#123;print $2&#125;&apos;`</div><div class=\"line\">if [ -n &quot;$PID&quot; ]; then</div><div class=\"line\">        echo &quot;Will shutdown tomcat: $PID&quot;</div><div class=\"line\">        sh &quot;$target_dir/bin/shutdown.sh&quot;</div><div class=\"line\">        sleep 5</div><div class=\"line\">fi</div><div class=\"line\">#1.1 停止失败,则直接kill进程</div><div class=\"line\"></div><div class=\"line\">PID2=`ps aux | grep $target_dir | grep java | awk &apos;&#123;print $2&#125;&apos;`</div><div class=\"line\"></div><div class=\"line\">if [ -n &quot;$PID2&quot; ]; then</div><div class=\"line\">\t\techo &quot;shutdown tomcat has failed.Will kill tomcat: $PID&quot;</div><div class=\"line\">        kill -9 $PID2</div><div class=\"line\">        </div><div class=\"line\">fi</div><div class=\"line\"></div><div class=\"line\">#2. 删除掉原来的项目</div><div class=\"line\">#rm -rf $&#123;target_dir&#125;/webapps/$&#123;target_name&#125;</div><div class=\"line\">rm  $&#123;target_dir&#125;/webapps/$&#123;target_name&#125;.war</div><div class=\"line\"></div><div class=\"line\">#3. 将文件移动到tomcat目录</div><div class=\"line\">mv $&#123;source_name&#125; $&#123;target_dir&#125;/webapps/$&#123;target_name&#125;.war</div><div class=\"line\"></div><div class=\"line\">#4. 启动tomcat</div><div class=\"line\">sh &quot;$target_dir/bin/startup.sh&quot;</div><div class=\"line\"></div><div class=\"line\">#5. 验证tomcat启动成功</div><div class=\"line\">sleep 3</div><div class=\"line\"></div><div class=\"line\">PID=`ps aux | grep $target_dir | grep java | awk &apos;&#123;print $2&#125;&apos;`</div><div class=\"line\">if [ -n &quot;$PID&quot; ]; then</div><div class=\"line\">        echo &quot;\\nRestart tomcat successfully!&quot;</div><div class=\"line\">else</div><div class=\"line\">        echo &quot;\\nFail to startup tomcat&quot;</div><div class=\"line\">        exit 1</div><div class=\"line\">fi</div></pre></td></tr></table></figure>\n","excerpt":"<p>持续集成(Continuous integration)是一种软件开发实践,当项目越来越大,结构越来越复杂,人员越来越庞大.协同,编译,测试,发布都成为一种耗时间的事情.<br>持续集成是一种自动化的构建.将复杂繁琐的构建进行自动化.从而尽快地发现集成错误。许多团队发现这个过程可以大大减少集成的问题，让团队能够更快的开发内聚.</p>\n<p>最近公司使用jenkins做持续集成.从git上获取代码,通过maven进行打包.<br>打包后进行发布到各自的服务器.</p>\n<p>本文记录了如何进行部署到服务器的.</p>","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>jenkins的安装,链接git什么的直接百度就ok了</p>\n<h1 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h1><p>jenkins 自动部署需要一个插件<br><code>Publish Over SSH</code></p>\n<h1 id=\"设置服务器信息\"><a href=\"#设置服务器信息\" class=\"headerlink\" title=\"设置服务器信息\"></a>设置服务器信息</h1><p>我们需要先设置要部署的服务器信息,即ssh信息</p>\n<p>系统管理-&gt;系统设置 找到publish over ssh<br><img src=\"/img/jenkinspullssh/publish-ssh.png\" alt=\"设置ssh\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">Passphrase: 如果是密匙的话是密匙的密码,如果使用用户名登录,这里是用户名密码,没有密码留空</div><div class=\"line\"></div><div class=\"line\">Path to key: 私钥的保存位置,我们把key拷贝到了jenkins工作目录下的sshkey/id_rsa.</div><div class=\"line\">\t\t这一项可不写,可以直接把key的内容填到下面一栏中.两者可二选一.</div><div class=\"line\"></div><div class=\"line\">Key : 私钥的内容.如果上面的没写的话,这里一定要写.和上面的选项是二选一的.也可以2个都给.</div><div class=\"line\"></div><div class=\"line\">SSH Servers: 远程服务器相关配置,也就是我们要把程序发布到的那一台机器的相关配置.主要配置有</div><div class=\"line\"></div><div class=\"line\">Name: 起一个名字,方便后面配置发布的时候,选择服务器.</div><div class=\"line\"></div><div class=\"line\">Hostname: 远程服务器的IP地址,如果写远程的主机名的话,要在jenkins的hosts文件中加映射.</div><div class=\"line\"></div><div class=\"line\">Username: 远程服务器的登录用户名</div><div class=\"line\"></div><div class=\"line\">Remote Directory: 要把文件发布到远程机器的哪一个目录.</div></pre></td></tr></table></figure>\n<p>设置好点击保存</p>\n<h1 id=\"项目设置构建配置\"><a href=\"#项目设置构建配置\" class=\"headerlink\" title=\"项目设置构建配置\"></a>项目设置构建配置</h1><p>jenkins中进入我们项目的面板,进入配置项.<br>找到Post Steps 面板,这个面板是说 在构建成功后执行的操作<br>添加一步操作,找到Send files or execute commands over SSH 一项,这一项是我们之前安装的 publish over ssh 插件所拥有的.<br><img src=\"/img/jenkinspullssh/publish-ssh-3.png\" alt=\"添加操作\"></p>\n<p>添加后:<br><img src=\"/img/jenkinspullssh/publish-ssh-2.png\" alt=\"设置操作\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">sshServer 选择一个要发布的服务器,这里是前面已经添加好的服务器的名字.</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">source</span> files: 要拷贝到远程的文件.这里的相对路径是相对于jenkins的WORKSPACE的.</div><div class=\"line\">\t即jenkins的工作目录.</div><div class=\"line\"></div><div class=\"line\">remove prefix: 这里是一个要注意的地方,如果这里的remove prefix为空,</div><div class=\"line\">\t则jenkins会在远程服务器上面创建一个target的目录,然后把文件放进去.</div><div class=\"line\">\t如果不想要target目录,这里就要写target.</div><div class=\"line\"></div><div class=\"line\">remote directory: 把文件放在远程服务器的哪个位置.这个位置相对于之前设置的全局Remote Directory:</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">exec</span> <span class=\"built_in\">command</span>: 把文件拷贝到远程服务器之后,要在远程服务器执行的命令,如果没有命令可以不写.</div><div class=\"line\">\t\t我这里是让其执行一个文件,该文件内容为将tomcat重启.</div></pre></td></tr></table></figure>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><p>到上一步为止,所有的设置就结束了.<br>jenkins会在项目构建完成后,将打出的war包推到配置的服务器上.<br>这里贴出我wfmanager.sh的内容,以便参考.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\">#源地址</div><div class=\"line\">source_name=&quot;/storage/tools/data/wfmanager</div><div class=\"line\">/horizon-workflow-web/target/horizon-workflow-web.war&quot;</div><div class=\"line\">#目标目录</div><div class=\"line\">target_dir=&quot;/storage/tools/horizon1&quot;</div><div class=\"line\">#目标名称</div><div class=\"line\">target_name=&quot;workflow&quot;</div><div class=\"line\"></div><div class=\"line\">#1.首先关闭tomcat</div><div class=\"line\">PID=`ps aux | grep $target_dir | grep java | awk &apos;&#123;print $2&#125;&apos;`</div><div class=\"line\">if [ -n &quot;$PID&quot; ]; then</div><div class=\"line\">        echo &quot;Will shutdown tomcat: $PID&quot;</div><div class=\"line\">        sh &quot;$target_dir/bin/shutdown.sh&quot;</div><div class=\"line\">        sleep 5</div><div class=\"line\">fi</div><div class=\"line\">#1.1 停止失败,则直接kill进程</div><div class=\"line\"></div><div class=\"line\">PID2=`ps aux | grep $target_dir | grep java | awk &apos;&#123;print $2&#125;&apos;`</div><div class=\"line\"></div><div class=\"line\">if [ -n &quot;$PID2&quot; ]; then</div><div class=\"line\">\t\techo &quot;shutdown tomcat has failed.Will kill tomcat: $PID&quot;</div><div class=\"line\">        kill -9 $PID2</div><div class=\"line\">        </div><div class=\"line\">fi</div><div class=\"line\"></div><div class=\"line\">#2. 删除掉原来的项目</div><div class=\"line\">#rm -rf $&#123;target_dir&#125;/webapps/$&#123;target_name&#125;</div><div class=\"line\">rm  $&#123;target_dir&#125;/webapps/$&#123;target_name&#125;.war</div><div class=\"line\"></div><div class=\"line\">#3. 将文件移动到tomcat目录</div><div class=\"line\">mv $&#123;source_name&#125; $&#123;target_dir&#125;/webapps/$&#123;target_name&#125;.war</div><div class=\"line\"></div><div class=\"line\">#4. 启动tomcat</div><div class=\"line\">sh &quot;$target_dir/bin/startup.sh&quot;</div><div class=\"line\"></div><div class=\"line\">#5. 验证tomcat启动成功</div><div class=\"line\">sleep 3</div><div class=\"line\"></div><div class=\"line\">PID=`ps aux | grep $target_dir | grep java | awk &apos;&#123;print $2&#125;&apos;`</div><div class=\"line\">if [ -n &quot;$PID&quot; ]; then</div><div class=\"line\">        echo &quot;\\nRestart tomcat successfully!&quot;</div><div class=\"line\">else</div><div class=\"line\">        echo &quot;\\nFail to startup tomcat&quot;</div><div class=\"line\">        exit 1</div><div class=\"line\">fi</div></pre></td></tr></table></figure>"},{"title":"springboot-静态资源文件处理(webjars)","date":"2017-03-09T16:00:00.000Z","_content":"\n 本文主要借鉴了[Spring Boot 静态资源处理](http://blog.csdn.net/isea533/article/details/50412212)一文,作为记录使用.\n WebJars是将Web前端Javascript和CSS等资源打包成Java的Jar包，这样在Java Web开发中我们可以借助Maven这些依赖库的管理，保证这些Web资源版本唯一性。\n\n <!--more-->\n\n# spring-boot静态文件处理\n## 静态资源处理\n\nspring Boot 默认的处理方式就已经足够了，默认情况下Spring Boot 使用WebMvcAutoConfiguration中配置的各种属性。\n\n建议使用Spring Boot 默认处理方式，需要自己配置的地方可以通过配置文件修改。\n\n但是如果你想完全控制Spring MVC，你可以在@Configuration注解的配置类上增加@EnableWebMvc，增加该注解以后WebMvcAutoConfiguration中配置就不会生效，你需要自己来配置需要的每一项。这种情况下的配置方法建议参考WebMvcAutoConfiguration类。\n\n本文以下内容针对Spring Boot 默认的处理方式，部分配置通过在application.properties配置文件中设置。\n\n## 配置资源映射\nSpring Boot 默认配置的/**映射到/static（或/public ，/resources，/META-INF/resources)\n/webjars/**会映射到classpath:/META-INF/resources/webjars/。\n\n注意：上面的/static等目录都是在classpath:下面。\n其查找顺序为\n\n```bash\n/META-INF/resources\n/resources\n/static\n/public\n```\n\n那么,如果要增加自己查询的目录,即如果我们想自己的静态文件不放在这些目录里,需要进行设置.\n继承WebMvcConfigurerAdapter 类 然后重写addResourceHandlers方法\n\n```java\n@Configurable\npublic class WebMvcConfiguration extends WebMvcConfigurerAdapter {\n\n    @Override\n    public void addResourceHandlers(ResourceHandlerRegistry registry) {\n\n        registry.addResourceHandler(\"/mystatic/**\")\n        \t\t.addResourceLocations(\"classpath:/mystatic/\");\n    }\n}\n\n```\n\n这种方式会在默认的基础上增加/mystatic/**映射到classpath:/mystatic/，不会影响默认的方式，可以同时使用。\n\n静态资源映射还有一个配置选项，为了简单这里用.properties方式书写：\n\n```bash\nspring.mvc.static-path-pattern=/** # Path pattern used for static resources.\n```\n这个配置会影响默认的/**，例如修改为/static/**后，只能映射如/static/js/sample.js这样的请求（修改前是/js/sample.js）。这个配置只能写一个值，不像大多数可以配置多个用逗号隔开的。\n\n## 使用注意\n例如有如下目录结构：\n\n```bash\n└─resources\n    │  application.properties\n    │\n    ├─static\n    │  ├─css\n    │  │      index.css\n    │  │\n    │  └─js\n    │          index.js\n    │\n    └─templates\n            index.html\n```\n在index.html中该如何引用上面的静态资源呢？ \n\n```html\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/css/index.css\">\n<script type=\"text/javascript\" src=\"/js/index.js\"></script>\n```\n注意：默认配置的/**映射到/static（或/public ，/resources，/META-INF/resources）\n\n当请求/css/index.css的时候，Spring MVC 会在/static/目录下面找到。\n\n如果配置为/static/css/index.css，那么上面配置的几个目录下面都没有/static目录，因此会找不到资源文件！\n\n**所以写静态资源位置的时候，不要带上映射的目录名（如/static/，/public/ ，/resources/，/META-INF/resources/)！**\n\n# 使用WebJars\nWebJars是将这些通用的Web前端资源打包成Java的Jar包，然后借助Maven工具对其管理，保证这些Web资源版本唯一性，升级也比较容易。关于webjars资源，有一个专门的网站http://www.webjars.org/，我们可以到这个网站上找到自己需要的资源，在自己的工程中添加入maven依赖，即可直接使用这些资源了\n\n例如使用jQuery，添加依赖：\n\n```xml\n<dependency>\n    <groupId>org.webjars</groupId>\n    <artifactId>jquery</artifactId>\n    <version>1.11.3</version>\n</dependency>\n```\n然后可以如下使用：\n\n```html\n<script type=\"text/javascript\" src=\"/webjars/jquery/1.11.3/jquery.js\"></script>\n```\nwebjars默认会将下的文件,放在/META-INF/resources/webjars/ 目录下,\n所以spring-boot为我们做了重定向\n在WebMvcAutoConfiguration类中:\n\n```java\nif (!registry.hasMappingForPattern(\"/webjars/**\")) {\n\tcustomizeResourceHandlerRegistration(\n\t\t\tregistry.addResourceHandler(\"/webjars/**\")\n\t\t\t\t\t.addResourceLocations(\n\t\t\t\t\t\t\t\"classpath:/META-INF/resources/webjars/\")\n\t\t\t.setCachePeriod(cachePeriod));\n}\n```\n\n你可能注意到href中的1.11.3版本号了，如果仅仅这么使用，那么当我们切换版本号的时候还要手动修改href，怪麻烦的，我们可以用如下方式解决。\n\n先在pom.xml中添加依赖：\n\n```xml\n<dependency>\n    <groupId>org.webjars</groupId>\n    <artifactId>webjars-locator</artifactId>\n</dependency>\n```\n增加一个WebJarController：\n\n```java\n@Controller\npublic class WebJarController {\n    private final WebJarAssetLocator assetLocator = new WebJarAssetLocator();\n\n    @ResponseBody\n    @RequestMapping(\"/webjarslocator/{webjar}/**\")\n    public ResponseEntity locateWebjarAsset(@PathVariable String webjar, HttpServletRequest request) {\n        try {\n            String mvcPrefix = \"/webjarslocator/\" + webjar + \"/\";\n            String mvcPath = (String) request.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE);\n            String fullPath = assetLocator.getFullPath(webjar, mvcPath.substring(mvcPrefix.length()));\n            return new ResponseEntity(new ClassPathResource(fullPath), HttpStatus.OK);\n        } catch (Exception e) {\n            return new ResponseEntity<>(HttpStatus.NOT_FOUND);\n        }\n    }\n}\n```\n然后使用的时候按照如下方式：\n\n```html\n<script type=\"text/javascript\" src=\"/webjarslocator/jquery/jquery.js\"></script>\n```\n\n注意：这里不需要在写版本号了，但是注意写url的时候，只是在原来url基础上去掉了版本号，其他的都不能少！\n\n\n# 參考資料\n[http://blog.csdn.net/isea533/article/details/50412212](http://blog.csdn.net/isea533/article/details/50412212)\n[http://www.cnblogs.com/mingziday/p/4748534.html](http://www.cnblogs.com/mingziday/p/4748534.html)\n","source":"_posts/boot-resources.md","raw":"---\ntitle: springboot-静态资源文件处理(webjars)\ndate: 2017-03-10 \ncategories: spring-boot\ntags: spring-boot\n---\n\n 本文主要借鉴了[Spring Boot 静态资源处理](http://blog.csdn.net/isea533/article/details/50412212)一文,作为记录使用.\n WebJars是将Web前端Javascript和CSS等资源打包成Java的Jar包，这样在Java Web开发中我们可以借助Maven这些依赖库的管理，保证这些Web资源版本唯一性。\n\n <!--more-->\n\n# spring-boot静态文件处理\n## 静态资源处理\n\nspring Boot 默认的处理方式就已经足够了，默认情况下Spring Boot 使用WebMvcAutoConfiguration中配置的各种属性。\n\n建议使用Spring Boot 默认处理方式，需要自己配置的地方可以通过配置文件修改。\n\n但是如果你想完全控制Spring MVC，你可以在@Configuration注解的配置类上增加@EnableWebMvc，增加该注解以后WebMvcAutoConfiguration中配置就不会生效，你需要自己来配置需要的每一项。这种情况下的配置方法建议参考WebMvcAutoConfiguration类。\n\n本文以下内容针对Spring Boot 默认的处理方式，部分配置通过在application.properties配置文件中设置。\n\n## 配置资源映射\nSpring Boot 默认配置的/**映射到/static（或/public ，/resources，/META-INF/resources)\n/webjars/**会映射到classpath:/META-INF/resources/webjars/。\n\n注意：上面的/static等目录都是在classpath:下面。\n其查找顺序为\n\n```bash\n/META-INF/resources\n/resources\n/static\n/public\n```\n\n那么,如果要增加自己查询的目录,即如果我们想自己的静态文件不放在这些目录里,需要进行设置.\n继承WebMvcConfigurerAdapter 类 然后重写addResourceHandlers方法\n\n```java\n@Configurable\npublic class WebMvcConfiguration extends WebMvcConfigurerAdapter {\n\n    @Override\n    public void addResourceHandlers(ResourceHandlerRegistry registry) {\n\n        registry.addResourceHandler(\"/mystatic/**\")\n        \t\t.addResourceLocations(\"classpath:/mystatic/\");\n    }\n}\n\n```\n\n这种方式会在默认的基础上增加/mystatic/**映射到classpath:/mystatic/，不会影响默认的方式，可以同时使用。\n\n静态资源映射还有一个配置选项，为了简单这里用.properties方式书写：\n\n```bash\nspring.mvc.static-path-pattern=/** # Path pattern used for static resources.\n```\n这个配置会影响默认的/**，例如修改为/static/**后，只能映射如/static/js/sample.js这样的请求（修改前是/js/sample.js）。这个配置只能写一个值，不像大多数可以配置多个用逗号隔开的。\n\n## 使用注意\n例如有如下目录结构：\n\n```bash\n└─resources\n    │  application.properties\n    │\n    ├─static\n    │  ├─css\n    │  │      index.css\n    │  │\n    │  └─js\n    │          index.js\n    │\n    └─templates\n            index.html\n```\n在index.html中该如何引用上面的静态资源呢？ \n\n```html\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/css/index.css\">\n<script type=\"text/javascript\" src=\"/js/index.js\"></script>\n```\n注意：默认配置的/**映射到/static（或/public ，/resources，/META-INF/resources）\n\n当请求/css/index.css的时候，Spring MVC 会在/static/目录下面找到。\n\n如果配置为/static/css/index.css，那么上面配置的几个目录下面都没有/static目录，因此会找不到资源文件！\n\n**所以写静态资源位置的时候，不要带上映射的目录名（如/static/，/public/ ，/resources/，/META-INF/resources/)！**\n\n# 使用WebJars\nWebJars是将这些通用的Web前端资源打包成Java的Jar包，然后借助Maven工具对其管理，保证这些Web资源版本唯一性，升级也比较容易。关于webjars资源，有一个专门的网站http://www.webjars.org/，我们可以到这个网站上找到自己需要的资源，在自己的工程中添加入maven依赖，即可直接使用这些资源了\n\n例如使用jQuery，添加依赖：\n\n```xml\n<dependency>\n    <groupId>org.webjars</groupId>\n    <artifactId>jquery</artifactId>\n    <version>1.11.3</version>\n</dependency>\n```\n然后可以如下使用：\n\n```html\n<script type=\"text/javascript\" src=\"/webjars/jquery/1.11.3/jquery.js\"></script>\n```\nwebjars默认会将下的文件,放在/META-INF/resources/webjars/ 目录下,\n所以spring-boot为我们做了重定向\n在WebMvcAutoConfiguration类中:\n\n```java\nif (!registry.hasMappingForPattern(\"/webjars/**\")) {\n\tcustomizeResourceHandlerRegistration(\n\t\t\tregistry.addResourceHandler(\"/webjars/**\")\n\t\t\t\t\t.addResourceLocations(\n\t\t\t\t\t\t\t\"classpath:/META-INF/resources/webjars/\")\n\t\t\t.setCachePeriod(cachePeriod));\n}\n```\n\n你可能注意到href中的1.11.3版本号了，如果仅仅这么使用，那么当我们切换版本号的时候还要手动修改href，怪麻烦的，我们可以用如下方式解决。\n\n先在pom.xml中添加依赖：\n\n```xml\n<dependency>\n    <groupId>org.webjars</groupId>\n    <artifactId>webjars-locator</artifactId>\n</dependency>\n```\n增加一个WebJarController：\n\n```java\n@Controller\npublic class WebJarController {\n    private final WebJarAssetLocator assetLocator = new WebJarAssetLocator();\n\n    @ResponseBody\n    @RequestMapping(\"/webjarslocator/{webjar}/**\")\n    public ResponseEntity locateWebjarAsset(@PathVariable String webjar, HttpServletRequest request) {\n        try {\n            String mvcPrefix = \"/webjarslocator/\" + webjar + \"/\";\n            String mvcPath = (String) request.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE);\n            String fullPath = assetLocator.getFullPath(webjar, mvcPath.substring(mvcPrefix.length()));\n            return new ResponseEntity(new ClassPathResource(fullPath), HttpStatus.OK);\n        } catch (Exception e) {\n            return new ResponseEntity<>(HttpStatus.NOT_FOUND);\n        }\n    }\n}\n```\n然后使用的时候按照如下方式：\n\n```html\n<script type=\"text/javascript\" src=\"/webjarslocator/jquery/jquery.js\"></script>\n```\n\n注意：这里不需要在写版本号了，但是注意写url的时候，只是在原来url基础上去掉了版本号，其他的都不能少！\n\n\n# 參考資料\n[http://blog.csdn.net/isea533/article/details/50412212](http://blog.csdn.net/isea533/article/details/50412212)\n[http://www.cnblogs.com/mingziday/p/4748534.html](http://www.cnblogs.com/mingziday/p/4748534.html)\n","slug":"boot-resources","published":1,"updated":"2017-03-10T08:22:53.828Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0lwix8g0003zobw9mhvs2u8","content":"<p> 本文主要借鉴了<a href=\"http://blog.csdn.net/isea533/article/details/50412212\" target=\"_blank\" rel=\"external\">Spring Boot 静态资源处理</a>一文,作为记录使用.<br> WebJars是将Web前端Javascript和CSS等资源打包成Java的Jar包，这样在Java Web开发中我们可以借助Maven这些依赖库的管理，保证这些Web资源版本唯一性。</p>\n <a id=\"more\"></a>\n<h1 id=\"spring-boot静态文件处理\"><a href=\"#spring-boot静态文件处理\" class=\"headerlink\" title=\"spring-boot静态文件处理\"></a>spring-boot静态文件处理</h1><h2 id=\"静态资源处理\"><a href=\"#静态资源处理\" class=\"headerlink\" title=\"静态资源处理\"></a>静态资源处理</h2><p>spring Boot 默认的处理方式就已经足够了，默认情况下Spring Boot 使用WebMvcAutoConfiguration中配置的各种属性。</p>\n<p>建议使用Spring Boot 默认处理方式，需要自己配置的地方可以通过配置文件修改。</p>\n<p>但是如果你想完全控制Spring MVC，你可以在@Configuration注解的配置类上增加@EnableWebMvc，增加该注解以后WebMvcAutoConfiguration中配置就不会生效，你需要自己来配置需要的每一项。这种情况下的配置方法建议参考WebMvcAutoConfiguration类。</p>\n<p>本文以下内容针对Spring Boot 默认的处理方式，部分配置通过在application.properties配置文件中设置。</p>\n<h2 id=\"配置资源映射\"><a href=\"#配置资源映射\" class=\"headerlink\" title=\"配置资源映射\"></a>配置资源映射</h2><p>Spring Boot 默认配置的/<strong>映射到/static（或/public ，/resources，/META-INF/resources)<br>/webjars/</strong>会映射到classpath:/META-INF/resources/webjars/。</p>\n<p>注意：上面的/static等目录都是在classpath:下面。<br>其查找顺序为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">/META-INF/resources</div><div class=\"line\">/resources</div><div class=\"line\">/static</div><div class=\"line\">/public</div></pre></td></tr></table></figure>\n<p>那么,如果要增加自己查询的目录,即如果我们想自己的静态文件不放在这些目录里,需要进行设置.<br>继承WebMvcConfigurerAdapter 类 然后重写addResourceHandlers方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Configurable</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebMvcConfiguration</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebMvcConfigurerAdapter</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addResourceHandlers</span><span class=\"params\">(ResourceHandlerRegistry registry)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        registry.addResourceHandler(<span class=\"string\">\"/mystatic/**\"</span>)</div><div class=\"line\">        \t\t.addResourceLocations(<span class=\"string\">\"classpath:/mystatic/\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这种方式会在默认的基础上增加/mystatic/**映射到classpath:/mystatic/，不会影响默认的方式，可以同时使用。</p>\n<p>静态资源映射还有一个配置选项，为了简单这里用.properties方式书写：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">spring.mvc.static-path-pattern=/** <span class=\"comment\"># Path pattern used for static resources.</span></div></pre></td></tr></table></figure>\n<p>这个配置会影响默认的/<strong>，例如修改为/static/</strong>后，只能映射如/static/js/sample.js这样的请求（修改前是/js/sample.js）。这个配置只能写一个值，不像大多数可以配置多个用逗号隔开的。</p>\n<h2 id=\"使用注意\"><a href=\"#使用注意\" class=\"headerlink\" title=\"使用注意\"></a>使用注意</h2><p>例如有如下目录结构：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">└─resources</div><div class=\"line\">    │  application.properties</div><div class=\"line\">    │</div><div class=\"line\">    ├─static</div><div class=\"line\">    │  ├─css</div><div class=\"line\">    │  │      index.css</div><div class=\"line\">    │  │</div><div class=\"line\">    │  └─js</div><div class=\"line\">    │          index.js</div><div class=\"line\">    │</div><div class=\"line\">    └─templates</div><div class=\"line\">            index.html</div></pre></td></tr></table></figure>\n<p>在index.html中该如何引用上面的静态资源呢？ </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/css/index.css\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/js/index.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>注意：默认配置的/**映射到/static（或/public ，/resources，/META-INF/resources）</p>\n<p>当请求/css/index.css的时候，Spring MVC 会在/static/目录下面找到。</p>\n<p>如果配置为/static/css/index.css，那么上面配置的几个目录下面都没有/static目录，因此会找不到资源文件！</p>\n<p><strong>所以写静态资源位置的时候，不要带上映射的目录名（如/static/，/public/ ，/resources/，/META-INF/resources/)！</strong></p>\n<h1 id=\"使用WebJars\"><a href=\"#使用WebJars\" class=\"headerlink\" title=\"使用WebJars\"></a>使用WebJars</h1><p>WebJars是将这些通用的Web前端资源打包成Java的Jar包，然后借助Maven工具对其管理，保证这些Web资源版本唯一性，升级也比较容易。关于webjars资源，有一个专门的网站<a href=\"http://www.webjars.org/，我们可以到这个网站上找到自己需要的资源，在自己的工程中添加入maven依赖，即可直接使用这些资源了\" target=\"_blank\" rel=\"external\">http://www.webjars.org/，我们可以到这个网站上找到自己需要的资源，在自己的工程中添加入maven依赖，即可直接使用这些资源了</a></p>\n<p>例如使用jQuery，添加依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.webjars<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jquery<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.11.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>然后可以如下使用：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/webjars/jquery/1.11.3/jquery.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>webjars默认会将下的文件,放在/META-INF/resources/webjars/ 目录下,<br>所以spring-boot为我们做了重定向<br>在WebMvcAutoConfiguration类中:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (!registry.hasMappingForPattern(<span class=\"string\">\"/webjars/**\"</span>)) &#123;</div><div class=\"line\">\tcustomizeResourceHandlerRegistration(</div><div class=\"line\">\t\t\tregistry.addResourceHandler(<span class=\"string\">\"/webjars/**\"</span>)</div><div class=\"line\">\t\t\t\t\t.addResourceLocations(</div><div class=\"line\">\t\t\t\t\t\t\t<span class=\"string\">\"classpath:/META-INF/resources/webjars/\"</span>)</div><div class=\"line\">\t\t\t.setCachePeriod(cachePeriod));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>你可能注意到href中的1.11.3版本号了，如果仅仅这么使用，那么当我们切换版本号的时候还要手动修改href，怪麻烦的，我们可以用如下方式解决。</p>\n<p>先在pom.xml中添加依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.webjars<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>webjars-locator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>增加一个WebJarController：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Controller</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebJarController</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> WebJarAssetLocator assetLocator = <span class=\"keyword\">new</span> WebJarAssetLocator();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@ResponseBody</span></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/webjarslocator/&#123;webjar&#125;/**\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ResponseEntity <span class=\"title\">locateWebjarAsset</span><span class=\"params\">(@PathVariable String webjar, HttpServletRequest request)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            String mvcPrefix = <span class=\"string\">\"/webjarslocator/\"</span> + webjar + <span class=\"string\">\"/\"</span>;</div><div class=\"line\">            String mvcPath = (String) request.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE);</div><div class=\"line\">            String fullPath = assetLocator.getFullPath(webjar, mvcPath.substring(mvcPrefix.length()));</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResponseEntity(<span class=\"keyword\">new</span> ClassPathResource(fullPath), HttpStatus.OK);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResponseEntity&lt;&gt;(HttpStatus.NOT_FOUND);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后使用的时候按照如下方式：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/webjarslocator/jquery/jquery.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>注意：这里不需要在写版本号了，但是注意写url的时候，只是在原来url基础上去掉了版本号，其他的都不能少！</p>\n<h1 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h1><p><a href=\"http://blog.csdn.net/isea533/article/details/50412212\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/isea533/article/details/50412212</a><br><a href=\"http://www.cnblogs.com/mingziday/p/4748534.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/mingziday/p/4748534.html</a></p>\n","excerpt":"<p> 本文主要借鉴了<a href=\"http://blog.csdn.net/isea533/article/details/50412212\">Spring Boot 静态资源处理</a>一文,作为记录使用.<br> WebJars是将Web前端Javascript和CSS等资源打包成Java的Jar包，这样在Java Web开发中我们可以借助Maven这些依赖库的管理，保证这些Web资源版本唯一性。</p>","more":"<h1 id=\"spring-boot静态文件处理\"><a href=\"#spring-boot静态文件处理\" class=\"headerlink\" title=\"spring-boot静态文件处理\"></a>spring-boot静态文件处理</h1><h2 id=\"静态资源处理\"><a href=\"#静态资源处理\" class=\"headerlink\" title=\"静态资源处理\"></a>静态资源处理</h2><p>spring Boot 默认的处理方式就已经足够了，默认情况下Spring Boot 使用WebMvcAutoConfiguration中配置的各种属性。</p>\n<p>建议使用Spring Boot 默认处理方式，需要自己配置的地方可以通过配置文件修改。</p>\n<p>但是如果你想完全控制Spring MVC，你可以在@Configuration注解的配置类上增加@EnableWebMvc，增加该注解以后WebMvcAutoConfiguration中配置就不会生效，你需要自己来配置需要的每一项。这种情况下的配置方法建议参考WebMvcAutoConfiguration类。</p>\n<p>本文以下内容针对Spring Boot 默认的处理方式，部分配置通过在application.properties配置文件中设置。</p>\n<h2 id=\"配置资源映射\"><a href=\"#配置资源映射\" class=\"headerlink\" title=\"配置资源映射\"></a>配置资源映射</h2><p>Spring Boot 默认配置的/<strong>映射到/static（或/public ，/resources，/META-INF/resources)<br>/webjars/</strong>会映射到classpath:/META-INF/resources/webjars/。</p>\n<p>注意：上面的/static等目录都是在classpath:下面。<br>其查找顺序为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">/META-INF/resources</div><div class=\"line\">/resources</div><div class=\"line\">/static</div><div class=\"line\">/public</div></pre></td></tr></table></figure>\n<p>那么,如果要增加自己查询的目录,即如果我们想自己的静态文件不放在这些目录里,需要进行设置.<br>继承WebMvcConfigurerAdapter 类 然后重写addResourceHandlers方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Configurable</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebMvcConfiguration</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebMvcConfigurerAdapter</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addResourceHandlers</span><span class=\"params\">(ResourceHandlerRegistry registry)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        registry.addResourceHandler(<span class=\"string\">\"/mystatic/**\"</span>)</div><div class=\"line\">        \t\t.addResourceLocations(<span class=\"string\">\"classpath:/mystatic/\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这种方式会在默认的基础上增加/mystatic/**映射到classpath:/mystatic/，不会影响默认的方式，可以同时使用。</p>\n<p>静态资源映射还有一个配置选项，为了简单这里用.properties方式书写：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">spring.mvc.static-path-pattern=/** <span class=\"comment\"># Path pattern used for static resources.</span></div></pre></td></tr></table></figure>\n<p>这个配置会影响默认的/<strong>，例如修改为/static/</strong>后，只能映射如/static/js/sample.js这样的请求（修改前是/js/sample.js）。这个配置只能写一个值，不像大多数可以配置多个用逗号隔开的。</p>\n<h2 id=\"使用注意\"><a href=\"#使用注意\" class=\"headerlink\" title=\"使用注意\"></a>使用注意</h2><p>例如有如下目录结构：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">└─resources</div><div class=\"line\">    │  application.properties</div><div class=\"line\">    │</div><div class=\"line\">    ├─static</div><div class=\"line\">    │  ├─css</div><div class=\"line\">    │  │      index.css</div><div class=\"line\">    │  │</div><div class=\"line\">    │  └─js</div><div class=\"line\">    │          index.js</div><div class=\"line\">    │</div><div class=\"line\">    └─templates</div><div class=\"line\">            index.html</div></pre></td></tr></table></figure>\n<p>在index.html中该如何引用上面的静态资源呢？ </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/css/index.css\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/js/index.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>注意：默认配置的/**映射到/static（或/public ，/resources，/META-INF/resources）</p>\n<p>当请求/css/index.css的时候，Spring MVC 会在/static/目录下面找到。</p>\n<p>如果配置为/static/css/index.css，那么上面配置的几个目录下面都没有/static目录，因此会找不到资源文件！</p>\n<p><strong>所以写静态资源位置的时候，不要带上映射的目录名（如/static/，/public/ ，/resources/，/META-INF/resources/)！</strong></p>\n<h1 id=\"使用WebJars\"><a href=\"#使用WebJars\" class=\"headerlink\" title=\"使用WebJars\"></a>使用WebJars</h1><p>WebJars是将这些通用的Web前端资源打包成Java的Jar包，然后借助Maven工具对其管理，保证这些Web资源版本唯一性，升级也比较容易。关于webjars资源，有一个专门的网站<a href=\"http://www.webjars.org/，我们可以到这个网站上找到自己需要的资源，在自己的工程中添加入maven依赖，即可直接使用这些资源了\">http://www.webjars.org/，我们可以到这个网站上找到自己需要的资源，在自己的工程中添加入maven依赖，即可直接使用这些资源了</a></p>\n<p>例如使用jQuery，添加依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.webjars<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jquery<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.11.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>然后可以如下使用：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/webjars/jquery/1.11.3/jquery.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>webjars默认会将下的文件,放在/META-INF/resources/webjars/ 目录下,<br>所以spring-boot为我们做了重定向<br>在WebMvcAutoConfiguration类中:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (!registry.hasMappingForPattern(<span class=\"string\">\"/webjars/**\"</span>)) &#123;</div><div class=\"line\">\tcustomizeResourceHandlerRegistration(</div><div class=\"line\">\t\t\tregistry.addResourceHandler(<span class=\"string\">\"/webjars/**\"</span>)</div><div class=\"line\">\t\t\t\t\t.addResourceLocations(</div><div class=\"line\">\t\t\t\t\t\t\t<span class=\"string\">\"classpath:/META-INF/resources/webjars/\"</span>)</div><div class=\"line\">\t\t\t.setCachePeriod(cachePeriod));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>你可能注意到href中的1.11.3版本号了，如果仅仅这么使用，那么当我们切换版本号的时候还要手动修改href，怪麻烦的，我们可以用如下方式解决。</p>\n<p>先在pom.xml中添加依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.webjars<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>webjars-locator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>增加一个WebJarController：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Controller</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebJarController</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> WebJarAssetLocator assetLocator = <span class=\"keyword\">new</span> WebJarAssetLocator();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@ResponseBody</span></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/webjarslocator/&#123;webjar&#125;/**\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ResponseEntity <span class=\"title\">locateWebjarAsset</span><span class=\"params\">(@PathVariable String webjar, HttpServletRequest request)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            String mvcPrefix = <span class=\"string\">\"/webjarslocator/\"</span> + webjar + <span class=\"string\">\"/\"</span>;</div><div class=\"line\">            String mvcPath = (String) request.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE);</div><div class=\"line\">            String fullPath = assetLocator.getFullPath(webjar, mvcPath.substring(mvcPrefix.length()));</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResponseEntity(<span class=\"keyword\">new</span> ClassPathResource(fullPath), HttpStatus.OK);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResponseEntity&lt;&gt;(HttpStatus.NOT_FOUND);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后使用的时候按照如下方式：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/webjarslocator/jquery/jquery.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>注意：这里不需要在写版本号了，但是注意写url的时候，只是在原来url基础上去掉了版本号，其他的都不能少！</p>\n<h1 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h1><p><a href=\"http://blog.csdn.net/isea533/article/details/50412212\">http://blog.csdn.net/isea533/article/details/50412212</a><br><a href=\"http://www.cnblogs.com/mingziday/p/4748534.html\">http://www.cnblogs.com/mingziday/p/4748534.html</a></p>"},{"title":"使用hexo+github做自己的个人博客","date":"2017-02-09T16:00:00.000Z","_content":"\n\n作为一名程序员,乐于分享是一项传统美德,本人也是经常会逛一些论坛,网站,自己也写过一些博客,后来技术网站越来越多,眼花缭乱,便想做一个自己的博客.\n本文便记录了自己是如何基于github pages来做自己的博客的.\n\n<!--more-->\n\n# github pages介绍\ngithub是一个代码托管的工具,而github pages提供一个服务,当你的github repository 被命名为yourname.github.io时,\t那么他的master分支上的文件则提供在yourname.github.io的跟目录访问.\n如果此时我们的文件是html文件的话,就相当于一个服务器了.\n我们就是利用这个特性来做自己的博客.\n整体思路为:将们的博客生成静态页面放到github pages上.\n\n那么纯用html文件来写博客也是一种痛苦的事情.尤其是对我们这种后端程序员,前端能力毕竟有限,还要我们有markdown,而markdown也几乎成为了一种写博客文章的主流工具.\n为了能使我们的博客更加美观一些,选择了hexo模板工具,该工具提供了一种生成静态文件的方法,能有效的使用网站模板来美化静态页面.\n\n# 申请github pages\n申请github pages完成参考官方文档就可以了.\n具体参考[官方文档](https://pages.github.com/ \"GitHub Pages\")\n\n# 安装git和nodejs\n因为我是window系统，对于git和nodejs的安装直接下一步就行了\ngit： [git官网](https://git-scm.com/download/)\nnodejs:[nodejs官网](https://nodejs.org/en/)\n安装之后进行验证：\n打开cmd\n\n``` bash\ngit --version\nnode -v\nnpm -v\n```\n![测试](/img/hexo20150701016.png)\n\n# 安装hexo\nhexo是基于node.js的静态博客，官网也是搭建在GitHub上\n在电脑上新建一个文件夹，比如取名为test，该文件夹用于存放你的博客源码\n>注意：博客源码并不是博客，而是一种模板，hexo会通过此模板进行生成静态博客，建议将博客源码也提交到github上，方便保存。\n\n## 安装淘宝镜像\n安装hexo有可能会出现被墙掉的情况，这里使用淘宝的NPM镜像。\n在test文件里打开git bash。\n\n>`npm install -g cnpm --registry=https://registry.npm.taobao.org`\n\n## 安装hexo\n使用cnpm命令，安装hexo\n>`cnpm install -g hexo-cli`\n\n继续输入命令：\n>`cnpm install hexo --save`\n\n安装完成后，验证是否安装正确\n>`hexo -v`\n\n# 运行hexo\n## 初始化hexo\n>`hexo init`\n## 安装生成器\n>`cnpm install`\n## 运行hexo\n>` hexo s -g`\n\n打开浏览器，查看是否成功\n>`http://localhost:4000`\n\n# hexo 与github pages 结合\n\n## 连接github pages\n我们进入test这个文件夹，发现里面已经有了一些文件\n![预览](/img/hexo20170211162714.png)\n其中_config.yml 是hexo的配置文件，我们姑且叫外置配置文件（因为不少模板有自己的内置配置文件）\n打开_config.yml进行配置，注意:key和value之间必须有一个空格\n\n```bash\ntitle: 博客主题目\nsubtitle: 博客副题目\ndescription: 博客的描述\nauthor: 博客的作者\nlanguage: zh-Hans\ntimezone: Asia/Shanghai\n\n# URL 网址\n## 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，则请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。\nurl: http://tengj.github.io\nroot: /\npermalink: :year/:month/:day/:title/\npermalink_defaults:\n\n# Directory 目录配置\nsource_dir: source     #源文件夹，这个文件夹用来存放内容。\npublic_dir: public     #公共文件夹，这个文件夹用于存放生成的站点文件。\ntag_dir: tags         #标签文件夹\narchive_dir: archives     #归档文件夹\ncategory_dir: categories #分类文件夹\ncode_dir: downloads/code #nclude code 文件夹\ni18n_dir: :lang         #国际化（i18n）文件夹\nskip_render:         #跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。\n\n# Writing 文章\nnew_post_name: :title.md # 新建文章默认文件名\ndefault_layout: post     # 默认布局\ntitlecase: false # Transform title into titlecase\nexternal_link: true # 在新标签中打开一个外部链接，默认为true\nfilename_case: 0    #转换文件名，1代表小写；2代表大写；默认为0，意思就是创建文章的时候，是否自动帮你转换文件名，默认就行，意义不大。\nrender_drafts: false  #是否渲染_drafts目录下的文章，默认为false\npost_asset_folder: false #启动 Asset 文件夹\nrelative_link: false    #把链接改为与根目录的相对位址，默认false\nfuture: true        #显示未来的文章，默认false\nhighlight:    #代码块的设置\n  enable: true\n  line_number: true\n  auto_detect: false\n  tab_replace:\n\n# Category & Tag 分类和标签的设置\ndefault_category: uncategorized        #默认分类\ncategory_map:                #分类别名\ntag_map:                #标签别名\n\n# Date / Time format\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\n\n# Pagination 分页\n## Set per_page to 0 to disable pagination\nper_page: 10    #每页显示的文章量 (0 = 关闭分页功能)\npagination_dir: page    #分页目录\n\n#博客主题，即本博客网站使用的模板，可在https://github.com/hexojs/hexo/wiki/Themes上选择\ntheme: next\n\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\n\n#链接的git地址\ndeploy:\n  type: git\n  repository: git@github.com:yourname/yourname.github.io.git\n  branch: master\n\n```\n\n主要是deploy属性，进行设置为你之前申请的github pages的git地址\n\n# 写博客\n\n## 新建博客\n使用命令新建博客\n>`hexo new \"hello\"`\n\n在文件夹/test/source/_posts/ 里找到hello.md，此文件即是你的博客的主体内容。\n此文件开头需要有一定的格式\n```bash\n---\ntitle: hello\ndate: 2015-07-01 22:37:23\ncategories:\n  - 日志\n  - 二级目录\ntags:\n  - hello\n---\n\n摘要:\n<!--more-->\n正文:\n\n```\n\n## 发布博客\n设置deploy属性后，进行通过命令进行发布\n*先安装插件\n>`npm install hexo-deployer-git --save`\n\n*发布博客\n> `hexo d -g`\n\n*发布成功后可以直接访问 http：//yourname.github.io进行查看你新生成的博客\n\n## git 的keygen\n当进行发布的时候，会发现没有git的权限，这是因为没有用户名密码造成的，我们不用用户名密码，而是使用keygen的方式\n\n*生成keygen\n>`ssh-keygen -t rsa -C '邮件地址@youremail.com'`\n\n一路回车\n```bash\n    1、打开本地C:\\Users\\Administrator\\.ssh\\id_rsa.pub文件。此文件里面内容为刚才生成人密钥。如果看不到这个文件，你需要设置显示隐藏文件。准确的复制这个文件的内容，才能保证设置的成功。\n\n    2、登陆github系统。点击右上角的 Account Settings—>SSH Public keys —> add another public keys\n\n    3、把你本地生成的密钥复制到里面（key文本框中）， 点击 add key 就ok了\n\n```\n\n# 参考资料\n\n[http://blog.csdn.net/jzooo/article/details/46781805](http://blog.csdn.net/jzooo/article/details/46781805)\n[http://www.cnfeat.com/blog/2014/05/10/how-to-build-a-blog/](http://www.cnfeat.com/blog/2014/05/10/how-to-build-a-blog/)\n[http://www.ezlippi.com/blog/2016/02/jekyll-to-hexo.html](http://www.ezlippi.com/blog/2016/02/jekyll-to-hexo.html)\n[https://hexo.io/zh-cn/docs/](https://hexo.io/zh-cn/docs/)","source":"_posts/hexo-githun-new.md","raw":"---\ntitle: 使用hexo+github做自己的个人博客\ndate: 2017-2-10\ncategories: 环境搭建\ntags: 环境搭建\n---\n\n\n作为一名程序员,乐于分享是一项传统美德,本人也是经常会逛一些论坛,网站,自己也写过一些博客,后来技术网站越来越多,眼花缭乱,便想做一个自己的博客.\n本文便记录了自己是如何基于github pages来做自己的博客的.\n\n<!--more-->\n\n# github pages介绍\ngithub是一个代码托管的工具,而github pages提供一个服务,当你的github repository 被命名为yourname.github.io时,\t那么他的master分支上的文件则提供在yourname.github.io的跟目录访问.\n如果此时我们的文件是html文件的话,就相当于一个服务器了.\n我们就是利用这个特性来做自己的博客.\n整体思路为:将们的博客生成静态页面放到github pages上.\n\n那么纯用html文件来写博客也是一种痛苦的事情.尤其是对我们这种后端程序员,前端能力毕竟有限,还要我们有markdown,而markdown也几乎成为了一种写博客文章的主流工具.\n为了能使我们的博客更加美观一些,选择了hexo模板工具,该工具提供了一种生成静态文件的方法,能有效的使用网站模板来美化静态页面.\n\n# 申请github pages\n申请github pages完成参考官方文档就可以了.\n具体参考[官方文档](https://pages.github.com/ \"GitHub Pages\")\n\n# 安装git和nodejs\n因为我是window系统，对于git和nodejs的安装直接下一步就行了\ngit： [git官网](https://git-scm.com/download/)\nnodejs:[nodejs官网](https://nodejs.org/en/)\n安装之后进行验证：\n打开cmd\n\n``` bash\ngit --version\nnode -v\nnpm -v\n```\n![测试](/img/hexo20150701016.png)\n\n# 安装hexo\nhexo是基于node.js的静态博客，官网也是搭建在GitHub上\n在电脑上新建一个文件夹，比如取名为test，该文件夹用于存放你的博客源码\n>注意：博客源码并不是博客，而是一种模板，hexo会通过此模板进行生成静态博客，建议将博客源码也提交到github上，方便保存。\n\n## 安装淘宝镜像\n安装hexo有可能会出现被墙掉的情况，这里使用淘宝的NPM镜像。\n在test文件里打开git bash。\n\n>`npm install -g cnpm --registry=https://registry.npm.taobao.org`\n\n## 安装hexo\n使用cnpm命令，安装hexo\n>`cnpm install -g hexo-cli`\n\n继续输入命令：\n>`cnpm install hexo --save`\n\n安装完成后，验证是否安装正确\n>`hexo -v`\n\n# 运行hexo\n## 初始化hexo\n>`hexo init`\n## 安装生成器\n>`cnpm install`\n## 运行hexo\n>` hexo s -g`\n\n打开浏览器，查看是否成功\n>`http://localhost:4000`\n\n# hexo 与github pages 结合\n\n## 连接github pages\n我们进入test这个文件夹，发现里面已经有了一些文件\n![预览](/img/hexo20170211162714.png)\n其中_config.yml 是hexo的配置文件，我们姑且叫外置配置文件（因为不少模板有自己的内置配置文件）\n打开_config.yml进行配置，注意:key和value之间必须有一个空格\n\n```bash\ntitle: 博客主题目\nsubtitle: 博客副题目\ndescription: 博客的描述\nauthor: 博客的作者\nlanguage: zh-Hans\ntimezone: Asia/Shanghai\n\n# URL 网址\n## 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，则请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。\nurl: http://tengj.github.io\nroot: /\npermalink: :year/:month/:day/:title/\npermalink_defaults:\n\n# Directory 目录配置\nsource_dir: source     #源文件夹，这个文件夹用来存放内容。\npublic_dir: public     #公共文件夹，这个文件夹用于存放生成的站点文件。\ntag_dir: tags         #标签文件夹\narchive_dir: archives     #归档文件夹\ncategory_dir: categories #分类文件夹\ncode_dir: downloads/code #nclude code 文件夹\ni18n_dir: :lang         #国际化（i18n）文件夹\nskip_render:         #跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。\n\n# Writing 文章\nnew_post_name: :title.md # 新建文章默认文件名\ndefault_layout: post     # 默认布局\ntitlecase: false # Transform title into titlecase\nexternal_link: true # 在新标签中打开一个外部链接，默认为true\nfilename_case: 0    #转换文件名，1代表小写；2代表大写；默认为0，意思就是创建文章的时候，是否自动帮你转换文件名，默认就行，意义不大。\nrender_drafts: false  #是否渲染_drafts目录下的文章，默认为false\npost_asset_folder: false #启动 Asset 文件夹\nrelative_link: false    #把链接改为与根目录的相对位址，默认false\nfuture: true        #显示未来的文章，默认false\nhighlight:    #代码块的设置\n  enable: true\n  line_number: true\n  auto_detect: false\n  tab_replace:\n\n# Category & Tag 分类和标签的设置\ndefault_category: uncategorized        #默认分类\ncategory_map:                #分类别名\ntag_map:                #标签别名\n\n# Date / Time format\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\n\n# Pagination 分页\n## Set per_page to 0 to disable pagination\nper_page: 10    #每页显示的文章量 (0 = 关闭分页功能)\npagination_dir: page    #分页目录\n\n#博客主题，即本博客网站使用的模板，可在https://github.com/hexojs/hexo/wiki/Themes上选择\ntheme: next\n\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\n\n#链接的git地址\ndeploy:\n  type: git\n  repository: git@github.com:yourname/yourname.github.io.git\n  branch: master\n\n```\n\n主要是deploy属性，进行设置为你之前申请的github pages的git地址\n\n# 写博客\n\n## 新建博客\n使用命令新建博客\n>`hexo new \"hello\"`\n\n在文件夹/test/source/_posts/ 里找到hello.md，此文件即是你的博客的主体内容。\n此文件开头需要有一定的格式\n```bash\n---\ntitle: hello\ndate: 2015-07-01 22:37:23\ncategories:\n  - 日志\n  - 二级目录\ntags:\n  - hello\n---\n\n摘要:\n<!--more-->\n正文:\n\n```\n\n## 发布博客\n设置deploy属性后，进行通过命令进行发布\n*先安装插件\n>`npm install hexo-deployer-git --save`\n\n*发布博客\n> `hexo d -g`\n\n*发布成功后可以直接访问 http：//yourname.github.io进行查看你新生成的博客\n\n## git 的keygen\n当进行发布的时候，会发现没有git的权限，这是因为没有用户名密码造成的，我们不用用户名密码，而是使用keygen的方式\n\n*生成keygen\n>`ssh-keygen -t rsa -C '邮件地址@youremail.com'`\n\n一路回车\n```bash\n    1、打开本地C:\\Users\\Administrator\\.ssh\\id_rsa.pub文件。此文件里面内容为刚才生成人密钥。如果看不到这个文件，你需要设置显示隐藏文件。准确的复制这个文件的内容，才能保证设置的成功。\n\n    2、登陆github系统。点击右上角的 Account Settings—>SSH Public keys —> add another public keys\n\n    3、把你本地生成的密钥复制到里面（key文本框中）， 点击 add key 就ok了\n\n```\n\n# 参考资料\n\n[http://blog.csdn.net/jzooo/article/details/46781805](http://blog.csdn.net/jzooo/article/details/46781805)\n[http://www.cnfeat.com/blog/2014/05/10/how-to-build-a-blog/](http://www.cnfeat.com/blog/2014/05/10/how-to-build-a-blog/)\n[http://www.ezlippi.com/blog/2016/02/jekyll-to-hexo.html](http://www.ezlippi.com/blog/2016/02/jekyll-to-hexo.html)\n[https://hexo.io/zh-cn/docs/](https://hexo.io/zh-cn/docs/)","slug":"hexo-githun-new","published":1,"updated":"2017-03-07T07:43:33.030Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0lwix8p0006zobwxdi0vfyt","content":"<p>作为一名程序员,乐于分享是一项传统美德,本人也是经常会逛一些论坛,网站,自己也写过一些博客,后来技术网站越来越多,眼花缭乱,便想做一个自己的博客.<br>本文便记录了自己是如何基于github pages来做自己的博客的.</p>\n<a id=\"more\"></a>\n<h1 id=\"github-pages介绍\"><a href=\"#github-pages介绍\" class=\"headerlink\" title=\"github pages介绍\"></a>github pages介绍</h1><p>github是一个代码托管的工具,而github pages提供一个服务,当你的github repository 被命名为yourname.github.io时,    那么他的master分支上的文件则提供在yourname.github.io的跟目录访问.<br>如果此时我们的文件是html文件的话,就相当于一个服务器了.<br>我们就是利用这个特性来做自己的博客.<br>整体思路为:将们的博客生成静态页面放到github pages上.</p>\n<p>那么纯用html文件来写博客也是一种痛苦的事情.尤其是对我们这种后端程序员,前端能力毕竟有限,还要我们有markdown,而markdown也几乎成为了一种写博客文章的主流工具.<br>为了能使我们的博客更加美观一些,选择了hexo模板工具,该工具提供了一种生成静态文件的方法,能有效的使用网站模板来美化静态页面.</p>\n<h1 id=\"申请github-pages\"><a href=\"#申请github-pages\" class=\"headerlink\" title=\"申请github pages\"></a>申请github pages</h1><p>申请github pages完成参考官方文档就可以了.<br>具体参考<a href=\"https://pages.github.com/\" title=\"GitHub Pages\" target=\"_blank\" rel=\"external\">官方文档</a></p>\n<h1 id=\"安装git和nodejs\"><a href=\"#安装git和nodejs\" class=\"headerlink\" title=\"安装git和nodejs\"></a>安装git和nodejs</h1><p>因为我是window系统，对于git和nodejs的安装直接下一步就行了<br>git： <a href=\"https://git-scm.com/download/\" target=\"_blank\" rel=\"external\">git官网</a><br>nodejs:<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"external\">nodejs官网</a><br>安装之后进行验证：<br>打开cmd</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git --version</div><div class=\"line\">node -v</div><div class=\"line\">npm -v</div></pre></td></tr></table></figure>\n<p><img src=\"/img/hexo20150701016.png\" alt=\"测试\"></p>\n<h1 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h1><p>hexo是基于node.js的静态博客，官网也是搭建在GitHub上<br>在电脑上新建一个文件夹，比如取名为test，该文件夹用于存放你的博客源码</p>\n<blockquote>\n<p>注意：博客源码并不是博客，而是一种模板，hexo会通过此模板进行生成静态博客，建议将博客源码也提交到github上，方便保存。</p>\n</blockquote>\n<h2 id=\"安装淘宝镜像\"><a href=\"#安装淘宝镜像\" class=\"headerlink\" title=\"安装淘宝镜像\"></a>安装淘宝镜像</h2><p>安装hexo有可能会出现被墙掉的情况，这里使用淘宝的NPM镜像。<br>在test文件里打开git bash。</p>\n<blockquote>\n<p><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p>\n</blockquote>\n<h2 id=\"安装hexo-1\"><a href=\"#安装hexo-1\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h2><p>使用cnpm命令，安装hexo</p>\n<blockquote>\n<p><code>cnpm install -g hexo-cli</code></p>\n</blockquote>\n<p>继续输入命令：</p>\n<blockquote>\n<p><code>cnpm install hexo --save</code></p>\n</blockquote>\n<p>安装完成后，验证是否安装正确</p>\n<blockquote>\n<p><code>hexo -v</code></p>\n</blockquote>\n<h1 id=\"运行hexo\"><a href=\"#运行hexo\" class=\"headerlink\" title=\"运行hexo\"></a>运行hexo</h1><h2 id=\"初始化hexo\"><a href=\"#初始化hexo\" class=\"headerlink\" title=\"初始化hexo\"></a>初始化hexo</h2><blockquote>\n<p><code>hexo init</code></p>\n<h2 id=\"安装生成器\"><a href=\"#安装生成器\" class=\"headerlink\" title=\"安装生成器\"></a>安装生成器</h2><p><code>cnpm install</code></p>\n<h2 id=\"运行hexo-1\"><a href=\"#运行hexo-1\" class=\"headerlink\" title=\"运行hexo\"></a>运行hexo</h2><p><code>hexo s -g</code></p>\n</blockquote>\n<p>打开浏览器，查看是否成功</p>\n<blockquote>\n<p><code>http://localhost:4000</code></p>\n</blockquote>\n<h1 id=\"hexo-与github-pages-结合\"><a href=\"#hexo-与github-pages-结合\" class=\"headerlink\" title=\"hexo 与github pages 结合\"></a>hexo 与github pages 结合</h1><h2 id=\"连接github-pages\"><a href=\"#连接github-pages\" class=\"headerlink\" title=\"连接github pages\"></a>连接github pages</h2><p>我们进入test这个文件夹，发现里面已经有了一些文件<br><img src=\"/img/hexo20170211162714.png\" alt=\"预览\"><br>其中_config.yml 是hexo的配置文件，我们姑且叫外置配置文件（因为不少模板有自己的内置配置文件）<br>打开_config.yml进行配置，注意:key和value之间必须有一个空格</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: 博客主题目</div><div class=\"line\">subtitle: 博客副题目</div><div class=\"line\">description: 博客的描述</div><div class=\"line\">author: 博客的作者</div><div class=\"line\">language: zh-Hans</div><div class=\"line\">timezone: Asia/Shanghai</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># URL 网址</span></div><div class=\"line\"><span class=\"comment\">## 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，则请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。</span></div><div class=\"line\">url: http://tengj.github.io</div><div class=\"line\">root: /</div><div class=\"line\">permalink: :year/:month/:day/:title/</div><div class=\"line\">permalink_defaults:</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Directory 目录配置</span></div><div class=\"line\">source_dir: <span class=\"built_in\">source</span>     <span class=\"comment\">#源文件夹，这个文件夹用来存放内容。</span></div><div class=\"line\">public_dir: public     <span class=\"comment\">#公共文件夹，这个文件夹用于存放生成的站点文件。</span></div><div class=\"line\">tag_dir: tags         <span class=\"comment\">#标签文件夹</span></div><div class=\"line\">archive_dir: archives     <span class=\"comment\">#归档文件夹</span></div><div class=\"line\">category_dir: categories <span class=\"comment\">#分类文件夹</span></div><div class=\"line\">code_dir: downloads/code <span class=\"comment\">#nclude code 文件夹</span></div><div class=\"line\">i18n_dir: :lang         <span class=\"comment\">#国际化（i18n）文件夹</span></div><div class=\"line\">skip_render:         <span class=\"comment\">#跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Writing 文章</span></div><div class=\"line\">new_post_name: :title.md <span class=\"comment\"># 新建文章默认文件名</span></div><div class=\"line\">default_layout: post     <span class=\"comment\"># 默认布局</span></div><div class=\"line\">titlecase: <span class=\"literal\">false</span> <span class=\"comment\"># Transform title into titlecase</span></div><div class=\"line\">external_link: <span class=\"literal\">true</span> <span class=\"comment\"># 在新标签中打开一个外部链接，默认为true</span></div><div class=\"line\">filename_case: 0    <span class=\"comment\">#转换文件名，1代表小写；2代表大写；默认为0，意思就是创建文章的时候，是否自动帮你转换文件名，默认就行，意义不大。</span></div><div class=\"line\">render_drafts: <span class=\"literal\">false</span>  <span class=\"comment\">#是否渲染_drafts目录下的文章，默认为false</span></div><div class=\"line\">post_asset_folder: <span class=\"literal\">false</span> <span class=\"comment\">#启动 Asset 文件夹</span></div><div class=\"line\">relative_link: <span class=\"literal\">false</span>    <span class=\"comment\">#把链接改为与根目录的相对位址，默认false</span></div><div class=\"line\">future: <span class=\"literal\">true</span>        <span class=\"comment\">#显示未来的文章，默认false</span></div><div class=\"line\">highlight:    <span class=\"comment\">#代码块的设置</span></div><div class=\"line\">  <span class=\"built_in\">enable</span>: <span class=\"literal\">true</span></div><div class=\"line\">  line_number: <span class=\"literal\">true</span></div><div class=\"line\">  auto_detect: <span class=\"literal\">false</span></div><div class=\"line\">  tab_replace:</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Category &amp; Tag 分类和标签的设置</span></div><div class=\"line\">default_category: uncategorized        <span class=\"comment\">#默认分类</span></div><div class=\"line\">category_map:                <span class=\"comment\">#分类别名</span></div><div class=\"line\">tag_map:                <span class=\"comment\">#标签别名</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Date / Time format</span></div><div class=\"line\"><span class=\"comment\">## Hexo uses Moment.js to parse and display date</span></div><div class=\"line\"><span class=\"comment\">## You can customize the date format as defined in</span></div><div class=\"line\"><span class=\"comment\">## http://momentjs.com/docs/#/displaying/format/</span></div><div class=\"line\">date_format: YYYY-MM-DD</div><div class=\"line\">time_format: HH:mm:ss</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Pagination 分页</span></div><div class=\"line\"><span class=\"comment\">## Set per_page to 0 to disable pagination</span></div><div class=\"line\">per_page: 10    <span class=\"comment\">#每页显示的文章量 (0 = 关闭分页功能)</span></div><div class=\"line\">pagination_dir: page    <span class=\"comment\">#分页目录</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#博客主题，即本博客网站使用的模板，可在https://github.com/hexojs/hexo/wiki/Themes上选择</span></div><div class=\"line\">theme: next</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Deployment</span></div><div class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#链接的git地址</span></div><div class=\"line\">deploy:</div><div class=\"line\">  <span class=\"built_in\">type</span>: git</div><div class=\"line\">  repository: git@github.com:yourname/yourname.github.io.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure>\n<p>主要是deploy属性，进行设置为你之前申请的github pages的git地址</p>\n<h1 id=\"写博客\"><a href=\"#写博客\" class=\"headerlink\" title=\"写博客\"></a>写博客</h1><h2 id=\"新建博客\"><a href=\"#新建博客\" class=\"headerlink\" title=\"新建博客\"></a>新建博客</h2><p>使用命令新建博客</p>\n<blockquote>\n<p><code>hexo new &quot;hello&quot;</code></p>\n</blockquote>\n<p>在文件夹/test/source/_posts/ 里找到hello.md，此文件即是你的博客的主体内容。<br>此文件开头需要有一定的格式<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">---</div><div class=\"line\">title: hello</div><div class=\"line\">date: 2015-07-01 22:37:23</div><div class=\"line\">categories:</div><div class=\"line\">  - 日志</div><div class=\"line\">  - 二级目录</div><div class=\"line\">tags:</div><div class=\"line\">  - hello</div><div class=\"line\">---</div><div class=\"line\"></div><div class=\"line\">摘要:</div><div class=\"line\">&lt;!--more--&gt;</div><div class=\"line\">正文:</div></pre></td></tr></table></figure></p>\n<h2 id=\"发布博客\"><a href=\"#发布博客\" class=\"headerlink\" title=\"发布博客\"></a>发布博客</h2><p>设置deploy属性后，进行通过命令进行发布<br>*先安装插件</p>\n<blockquote>\n<p><code>npm install hexo-deployer-git --save</code></p>\n</blockquote>\n<p>*发布博客</p>\n<blockquote>\n<p><code>hexo d -g</code></p>\n</blockquote>\n<p>*发布成功后可以直接访问 http：//yourname.github.io进行查看你新生成的博客</p>\n<h2 id=\"git-的keygen\"><a href=\"#git-的keygen\" class=\"headerlink\" title=\"git 的keygen\"></a>git 的keygen</h2><p>当进行发布的时候，会发现没有git的权限，这是因为没有用户名密码造成的，我们不用用户名密码，而是使用keygen的方式</p>\n<p>*生成keygen</p>\n<blockquote>\n<p><code>ssh-keygen -t rsa -C &#39;邮件地址@youremail.com&#39;</code></p>\n</blockquote>\n<p>一路回车<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">1、打开本地C:\\Users\\Administrator\\.ssh\\id_rsa.pub文件。此文件里面内容为刚才生成人密钥。如果看不到这个文件，你需要设置显示隐藏文件。准确的复制这个文件的内容，才能保证设置的成功。</div><div class=\"line\"></div><div class=\"line\">2、登陆github系统。点击右上角的 Account Settings—&gt;SSH Public keys —&gt; add another public keys</div><div class=\"line\"></div><div class=\"line\">3、把你本地生成的密钥复制到里面（key文本框中）， 点击 add key 就ok了</div></pre></td></tr></table></figure></p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"http://blog.csdn.net/jzooo/article/details/46781805\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/jzooo/article/details/46781805</a><br><a href=\"http://www.cnfeat.com/blog/2014/05/10/how-to-build-a-blog/\" target=\"_blank\" rel=\"external\">http://www.cnfeat.com/blog/2014/05/10/how-to-build-a-blog/</a><br><a href=\"http://www.ezlippi.com/blog/2016/02/jekyll-to-hexo.html\" target=\"_blank\" rel=\"external\">http://www.ezlippi.com/blog/2016/02/jekyll-to-hexo.html</a><br><a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"external\">https://hexo.io/zh-cn/docs/</a></p>\n","excerpt":"<p>作为一名程序员,乐于分享是一项传统美德,本人也是经常会逛一些论坛,网站,自己也写过一些博客,后来技术网站越来越多,眼花缭乱,便想做一个自己的博客.<br>本文便记录了自己是如何基于github pages来做自己的博客的.</p>","more":"<h1 id=\"github-pages介绍\"><a href=\"#github-pages介绍\" class=\"headerlink\" title=\"github pages介绍\"></a>github pages介绍</h1><p>github是一个代码托管的工具,而github pages提供一个服务,当你的github repository 被命名为yourname.github.io时,    那么他的master分支上的文件则提供在yourname.github.io的跟目录访问.<br>如果此时我们的文件是html文件的话,就相当于一个服务器了.<br>我们就是利用这个特性来做自己的博客.<br>整体思路为:将们的博客生成静态页面放到github pages上.</p>\n<p>那么纯用html文件来写博客也是一种痛苦的事情.尤其是对我们这种后端程序员,前端能力毕竟有限,还要我们有markdown,而markdown也几乎成为了一种写博客文章的主流工具.<br>为了能使我们的博客更加美观一些,选择了hexo模板工具,该工具提供了一种生成静态文件的方法,能有效的使用网站模板来美化静态页面.</p>\n<h1 id=\"申请github-pages\"><a href=\"#申请github-pages\" class=\"headerlink\" title=\"申请github pages\"></a>申请github pages</h1><p>申请github pages完成参考官方文档就可以了.<br>具体参考<a href=\"https://pages.github.com/\" title=\"GitHub Pages\">官方文档</a></p>\n<h1 id=\"安装git和nodejs\"><a href=\"#安装git和nodejs\" class=\"headerlink\" title=\"安装git和nodejs\"></a>安装git和nodejs</h1><p>因为我是window系统，对于git和nodejs的安装直接下一步就行了<br>git： <a href=\"https://git-scm.com/download/\">git官网</a><br>nodejs:<a href=\"https://nodejs.org/en/\">nodejs官网</a><br>安装之后进行验证：<br>打开cmd</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git --version</div><div class=\"line\">node -v</div><div class=\"line\">npm -v</div></pre></td></tr></table></figure>\n<p><img src=\"/img/hexo20150701016.png\" alt=\"测试\"></p>\n<h1 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h1><p>hexo是基于node.js的静态博客，官网也是搭建在GitHub上<br>在电脑上新建一个文件夹，比如取名为test，该文件夹用于存放你的博客源码</p>\n<blockquote>\n<p>注意：博客源码并不是博客，而是一种模板，hexo会通过此模板进行生成静态博客，建议将博客源码也提交到github上，方便保存。</p>\n</blockquote>\n<h2 id=\"安装淘宝镜像\"><a href=\"#安装淘宝镜像\" class=\"headerlink\" title=\"安装淘宝镜像\"></a>安装淘宝镜像</h2><p>安装hexo有可能会出现被墙掉的情况，这里使用淘宝的NPM镜像。<br>在test文件里打开git bash。</p>\n<blockquote>\n<p><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p>\n</blockquote>\n<h2 id=\"安装hexo-1\"><a href=\"#安装hexo-1\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h2><p>使用cnpm命令，安装hexo</p>\n<blockquote>\n<p><code>cnpm install -g hexo-cli</code></p>\n</blockquote>\n<p>继续输入命令：</p>\n<blockquote>\n<p><code>cnpm install hexo --save</code></p>\n</blockquote>\n<p>安装完成后，验证是否安装正确</p>\n<blockquote>\n<p><code>hexo -v</code></p>\n</blockquote>\n<h1 id=\"运行hexo\"><a href=\"#运行hexo\" class=\"headerlink\" title=\"运行hexo\"></a>运行hexo</h1><h2 id=\"初始化hexo\"><a href=\"#初始化hexo\" class=\"headerlink\" title=\"初始化hexo\"></a>初始化hexo</h2><blockquote>\n<p><code>hexo init</code></p>\n<h2 id=\"安装生成器\"><a href=\"#安装生成器\" class=\"headerlink\" title=\"安装生成器\"></a>安装生成器</h2><p><code>cnpm install</code></p>\n<h2 id=\"运行hexo-1\"><a href=\"#运行hexo-1\" class=\"headerlink\" title=\"运行hexo\"></a>运行hexo</h2><p><code>hexo s -g</code></p>\n</blockquote>\n<p>打开浏览器，查看是否成功</p>\n<blockquote>\n<p><code>http://localhost:4000</code></p>\n</blockquote>\n<h1 id=\"hexo-与github-pages-结合\"><a href=\"#hexo-与github-pages-结合\" class=\"headerlink\" title=\"hexo 与github pages 结合\"></a>hexo 与github pages 结合</h1><h2 id=\"连接github-pages\"><a href=\"#连接github-pages\" class=\"headerlink\" title=\"连接github pages\"></a>连接github pages</h2><p>我们进入test这个文件夹，发现里面已经有了一些文件<br><img src=\"/img/hexo20170211162714.png\" alt=\"预览\"><br>其中_config.yml 是hexo的配置文件，我们姑且叫外置配置文件（因为不少模板有自己的内置配置文件）<br>打开_config.yml进行配置，注意:key和value之间必须有一个空格</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: 博客主题目</div><div class=\"line\">subtitle: 博客副题目</div><div class=\"line\">description: 博客的描述</div><div class=\"line\">author: 博客的作者</div><div class=\"line\">language: zh-Hans</div><div class=\"line\">timezone: Asia/Shanghai</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># URL 网址</span></div><div class=\"line\"><span class=\"comment\">## 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，则请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。</span></div><div class=\"line\">url: http://tengj.github.io</div><div class=\"line\">root: /</div><div class=\"line\">permalink: :year/:month/:day/:title/</div><div class=\"line\">permalink_defaults:</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Directory 目录配置</span></div><div class=\"line\">source_dir: <span class=\"built_in\">source</span>     <span class=\"comment\">#源文件夹，这个文件夹用来存放内容。</span></div><div class=\"line\">public_dir: public     <span class=\"comment\">#公共文件夹，这个文件夹用于存放生成的站点文件。</span></div><div class=\"line\">tag_dir: tags         <span class=\"comment\">#标签文件夹</span></div><div class=\"line\">archive_dir: archives     <span class=\"comment\">#归档文件夹</span></div><div class=\"line\">category_dir: categories <span class=\"comment\">#分类文件夹</span></div><div class=\"line\">code_dir: downloads/code <span class=\"comment\">#nclude code 文件夹</span></div><div class=\"line\">i18n_dir: :lang         <span class=\"comment\">#国际化（i18n）文件夹</span></div><div class=\"line\">skip_render:         <span class=\"comment\">#跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Writing 文章</span></div><div class=\"line\">new_post_name: :title.md <span class=\"comment\"># 新建文章默认文件名</span></div><div class=\"line\">default_layout: post     <span class=\"comment\"># 默认布局</span></div><div class=\"line\">titlecase: <span class=\"literal\">false</span> <span class=\"comment\"># Transform title into titlecase</span></div><div class=\"line\">external_link: <span class=\"literal\">true</span> <span class=\"comment\"># 在新标签中打开一个外部链接，默认为true</span></div><div class=\"line\">filename_case: 0    <span class=\"comment\">#转换文件名，1代表小写；2代表大写；默认为0，意思就是创建文章的时候，是否自动帮你转换文件名，默认就行，意义不大。</span></div><div class=\"line\">render_drafts: <span class=\"literal\">false</span>  <span class=\"comment\">#是否渲染_drafts目录下的文章，默认为false</span></div><div class=\"line\">post_asset_folder: <span class=\"literal\">false</span> <span class=\"comment\">#启动 Asset 文件夹</span></div><div class=\"line\">relative_link: <span class=\"literal\">false</span>    <span class=\"comment\">#把链接改为与根目录的相对位址，默认false</span></div><div class=\"line\">future: <span class=\"literal\">true</span>        <span class=\"comment\">#显示未来的文章，默认false</span></div><div class=\"line\">highlight:    <span class=\"comment\">#代码块的设置</span></div><div class=\"line\">  <span class=\"built_in\">enable</span>: <span class=\"literal\">true</span></div><div class=\"line\">  line_number: <span class=\"literal\">true</span></div><div class=\"line\">  auto_detect: <span class=\"literal\">false</span></div><div class=\"line\">  tab_replace:</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Category &amp; Tag 分类和标签的设置</span></div><div class=\"line\">default_category: uncategorized        <span class=\"comment\">#默认分类</span></div><div class=\"line\">category_map:                <span class=\"comment\">#分类别名</span></div><div class=\"line\">tag_map:                <span class=\"comment\">#标签别名</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Date / Time format</span></div><div class=\"line\"><span class=\"comment\">## Hexo uses Moment.js to parse and display date</span></div><div class=\"line\"><span class=\"comment\">## You can customize the date format as defined in</span></div><div class=\"line\"><span class=\"comment\">## http://momentjs.com/docs/#/displaying/format/</span></div><div class=\"line\">date_format: YYYY-MM-DD</div><div class=\"line\">time_format: HH:mm:ss</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Pagination 分页</span></div><div class=\"line\"><span class=\"comment\">## Set per_page to 0 to disable pagination</span></div><div class=\"line\">per_page: 10    <span class=\"comment\">#每页显示的文章量 (0 = 关闭分页功能)</span></div><div class=\"line\">pagination_dir: page    <span class=\"comment\">#分页目录</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#博客主题，即本博客网站使用的模板，可在https://github.com/hexojs/hexo/wiki/Themes上选择</span></div><div class=\"line\">theme: next</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Deployment</span></div><div class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#链接的git地址</span></div><div class=\"line\">deploy:</div><div class=\"line\">  <span class=\"built_in\">type</span>: git</div><div class=\"line\">  repository: git@github.com:yourname/yourname.github.io.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure>\n<p>主要是deploy属性，进行设置为你之前申请的github pages的git地址</p>\n<h1 id=\"写博客\"><a href=\"#写博客\" class=\"headerlink\" title=\"写博客\"></a>写博客</h1><h2 id=\"新建博客\"><a href=\"#新建博客\" class=\"headerlink\" title=\"新建博客\"></a>新建博客</h2><p>使用命令新建博客</p>\n<blockquote>\n<p><code>hexo new &quot;hello&quot;</code></p>\n</blockquote>\n<p>在文件夹/test/source/_posts/ 里找到hello.md，此文件即是你的博客的主体内容。<br>此文件开头需要有一定的格式<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">---</div><div class=\"line\">title: hello</div><div class=\"line\">date: 2015-07-01 22:37:23</div><div class=\"line\">categories:</div><div class=\"line\">  - 日志</div><div class=\"line\">  - 二级目录</div><div class=\"line\">tags:</div><div class=\"line\">  - hello</div><div class=\"line\">---</div><div class=\"line\"></div><div class=\"line\">摘要:</div><div class=\"line\">&lt;!--more--&gt;</div><div class=\"line\">正文:</div></pre></td></tr></table></figure></p>\n<h2 id=\"发布博客\"><a href=\"#发布博客\" class=\"headerlink\" title=\"发布博客\"></a>发布博客</h2><p>设置deploy属性后，进行通过命令进行发布<br>*先安装插件</p>\n<blockquote>\n<p><code>npm install hexo-deployer-git --save</code></p>\n</blockquote>\n<p>*发布博客</p>\n<blockquote>\n<p><code>hexo d -g</code></p>\n</blockquote>\n<p>*发布成功后可以直接访问 http：//yourname.github.io进行查看你新生成的博客</p>\n<h2 id=\"git-的keygen\"><a href=\"#git-的keygen\" class=\"headerlink\" title=\"git 的keygen\"></a>git 的keygen</h2><p>当进行发布的时候，会发现没有git的权限，这是因为没有用户名密码造成的，我们不用用户名密码，而是使用keygen的方式</p>\n<p>*生成keygen</p>\n<blockquote>\n<p><code>ssh-keygen -t rsa -C &#39;邮件地址@youremail.com&#39;</code></p>\n</blockquote>\n<p>一路回车<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">1、打开本地C:\\Users\\Administrator\\.ssh\\id_rsa.pub文件。此文件里面内容为刚才生成人密钥。如果看不到这个文件，你需要设置显示隐藏文件。准确的复制这个文件的内容，才能保证设置的成功。</div><div class=\"line\"></div><div class=\"line\">2、登陆github系统。点击右上角的 Account Settings—&gt;SSH Public keys —&gt; add another public keys</div><div class=\"line\"></div><div class=\"line\">3、把你本地生成的密钥复制到里面（key文本框中）， 点击 add key 就ok了</div></pre></td></tr></table></figure></p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"http://blog.csdn.net/jzooo/article/details/46781805\">http://blog.csdn.net/jzooo/article/details/46781805</a><br><a href=\"http://www.cnfeat.com/blog/2014/05/10/how-to-build-a-blog/\">http://www.cnfeat.com/blog/2014/05/10/how-to-build-a-blog/</a><br><a href=\"http://www.ezlippi.com/blog/2016/02/jekyll-to-hexo.html\">http://www.ezlippi.com/blog/2016/02/jekyll-to-hexo.html</a><br><a href=\"https://hexo.io/zh-cn/docs/\">https://hexo.io/zh-cn/docs/</a></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj0lwix8b0001zobwy026zc5w","category_id":"cj0lwix8l0004zobwzcc8bssr","_id":"cj0lwix8t000azobwwmake46l"},{"post_id":"cj0lwix8g0003zobw9mhvs2u8","category_id":"cj0lwix8s0007zobws9dl8ibe","_id":"cj0lwix8x000ezobwu1v2mgs6"},{"post_id":"cj0lwix8p0006zobwxdi0vfyt","category_id":"cj0lwix8l0004zobwzcc8bssr","_id":"cj0lwix8y000gzobwurugcpcz"}],"PostTag":[{"post_id":"cj0lwix8b0001zobwy026zc5w","tag_id":"cj0lwix8o0005zobwzqyo28hl","_id":"cj0lwix8t0009zobwvbduy29n"},{"post_id":"cj0lwix8g0003zobw9mhvs2u8","tag_id":"cj0lwix8s0008zobweu50tj0e","_id":"cj0lwix8x000dzobwcyo1rmsv"},{"post_id":"cj0lwix8p0006zobwxdi0vfyt","tag_id":"cj0lwix8o0005zobwzqyo28hl","_id":"cj0lwix8y000fzobw5clqlx7q"}],"Tag":[{"name":"环境搭建","_id":"cj0lwix8o0005zobwzqyo28hl"},{"name":"spring-boot","_id":"cj0lwix8s0008zobweu50tj0e"}]}}